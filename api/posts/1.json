{"total":4,"pageSize":10,"pageCount":1,"data":[{"title":"正则表达式-扩展符号","slug":"正则表达式-扩展符号","date":"2018-05-07T15:20:54.000Z","updated":"2018-05-08T16:27:24.614Z","comments":true,"path":"api/articles/正则表达式-扩展符号.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br><strong>(?iLmsux)</strong><br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">42</span>]: re.findall(<span class=\"string\">r\"(?i)yes\"</span>, <span class=\"string\">\"yes, Yes, YES\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">42</span>]: [<span class=\"string\">'yes'</span>, <span class=\"string\">'Yes'</span>, <span class=\"string\">'YES'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“m”表示把多行作为各个独立体而不是一个整体来判断，因此用^匹配的时候，两行都会命中。<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">49</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">49</span>]: <span class=\"string\">'the first line,\\nthis is second line'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">50</span>]: re.findall(<span class=\"string\">r\"^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">50</span>]: [<span class=\"string\">'the'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">51</span>]: re.findall(<span class=\"string\">r\"(?m)^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">51</span>]: [<span class=\"string\">'the'</span>, <span class=\"string\">'this'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“s”表示.可以匹配包括换行符在内的所有字符。<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">60</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: re.search(<span class=\"string\">r\"the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: <span class=\"string\">'the first'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">62</span>]: re.search(<span class=\"string\">r\"(?s)the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">62</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br></pre></td></tr></table></figure></p>\n<p>“x”允许对匹配模式换行，加上注释等，使之更易读。<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">70</span>]: phonenumber</span><br><span class=\"line\">Out[<span class=\"number\">70</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: re.match(<span class=\"string\">r'''(?x)</span></span><br><span class=\"line\"><span class=\"string\">...:          \\((\\d&#123;3&#125;)\\) #区号</span></span><br><span class=\"line\"><span class=\"string\">...:          \\s+         #空白</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;3&#125;       #前缀</span></span><br><span class=\"line\"><span class=\"string\">...:          -           #横线</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;4&#125;       #尾号</span></span><br><span class=\"line\"><span class=\"string\">...:          '''</span>, phonenumber).group()</span><br><span class=\"line\">Out[<span class=\"number\">71</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>(?:…) </strong>可以对部分正则表达式分组，但是并不会保存该分组用于后续的检查或者应用<br><br><br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">3</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"string\">'http://google.com http://www.google.com http://code.google.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: re.findall(<span class=\"string\">r\"http://(\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: [(<span class=\"string\">''</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'www.'</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'code.'</span>, <span class=\"string\">'google.com'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">5</span>]: re.findall(<span class=\"string\">r\"http://(?:\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">5</span>]: [<span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>(?P<name>)</name></strong>通过名称来保存匹配到的分组<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">11</span>]: re.search(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"2018-5-8\"</span>).groupdict()</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: &#123;<span class=\"string\">'year'</span>: <span class=\"string\">'2018'</span>, <span class=\"string\">'month'</span>: <span class=\"string\">'5'</span>, <span class=\"string\">'day'</span>: <span class=\"string\">'8'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: re.sub(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"\\g&lt;month&gt;-\\g&lt;day&gt;-\\g&lt;year&gt;\"</span>,<span class=\"string\">\"2018-5-8\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">12</span>]: <span class=\"string\">'5-8-2018'</span></span><br></pre></td></tr></table></figure></p>\n<p>在sub函数中可以通过”\\g&lt;year>“表示匹配到的分组year，而不用\\num来表示。<br><br><br><strong>(?=…)</strong><br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">13</span>]: re.findall(<span class=\"string\">r\"\\w+ (?=van Rossum)\"</span>, <span class=\"string\">\"Guido van Rossum, Just van Rossum, Kay Ring\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: [<span class=\"string\">'Guido '</span>, <span class=\"string\">'Just '</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\w+ (?=van Rossum)\"</span>模式，表示只有后接<span class=\"string\">\"van Rossum\"</span>的<span class=\"string\">\"\\w+ \"</span>才匹配。</span><br></pre></td></tr></table></figure></p>\n<p><br><br><strong>(?!…)</strong><br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">22</span>]: re.findall(<span class=\"string\">r\"Emma (?!test)\"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">22</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">23</span>]: re.findall(<span class=\"string\">r\"Emma \"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">23</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"><span class=\"string\">\"Emma (?!test)\"</span>模式 ，表示只有后面不是接<span class=\"string\">\"test\"</span>的<span class=\"string\">\"Emma \"</span>才会匹配。</span><br></pre></td></tr></table></figure></p>\n","text":"Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br>(?iLmsux)<br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br>1<br>2<br>In [42]: re.findall(","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}]},{"title":"简单总结一下近期学习的shell脚本编程","slug":"简单总结一下近期学习的shell脚本编程","date":"2018-05-01T06:58:47.000Z","updated":"2018-05-01T11:29:07.101Z","comments":true,"path":"api/articles/简单总结一下近期学习的shell脚本编程.json","excerpt":"","keywords":null,"cover":null,"content":"<p>花了点时间把《The Linux command line》这本书最后部分看完了—shell脚本编程，总结于此，加深印象。</p>\n<p>脚本第一行需要告诉操作系统用什么解释器来执行我们的脚本，即shebang:<br><code>#!/bin/bash</code><br>定义变量，”=”两边不能有空格，使用变量需要加上前缀”$”来展开:<br><code><br>    foo=emma<br>    echo $foo<br></code></p>\n<p>shell函数,定义语法有两种：<br><code><br>    a)function name {<br>    commands<br>    return<br>    }<br>    b)name () {<br>    commands<br>    return<br>    }<br></code><br>函数的定义必须在使用之前，因此最好在脚本开头把函数全部定义好。<br>局部变量：<br><code><br>    foo=0<br>    func1 () {<br>        local foo<br>        foo=1<br>        echo “func1:foo = $foo”<br>    }<br>    func2 () {<br>        local foo<br>        foo=2<br>        echo “func2:foo = $foo”<br>    }<br>    echo “global: foo = $foo”<br>    func1<br>    echo “global: foo = $foo”<br>    func2<br>    echo “global: foo = $foo”<br></code><br>运行结果：<br><code><br>    jo@Arch  ~  hello.sh<br>    global: foo = 0<br>    func1:foo = 1<br>    global: foo = 0<br>    func2:foo = 2<br>    global: foo = 0<br></code><br>可见，在函数内通过local命令可以定义局部变量，局部变量仅对其所在的函数起作用。<br>Shell Functions In Your .bashrc File<br>shell函数完美的替代了别名，并且实际上是创建个人所用的小命令的首选方法。别名非常局限于命令的种类和它们支持的shell功能，然而 shell函数允许任何可以编写脚本的东西。例如，如果我们喜欢为我们的脚本开发的这个 report_disk_space shell 函数，我们可以为我们的.bashrc 文件 创建一个相似的名为 ds 的函数：<br><code><br>    ds () {<br>        echo “Disk Space Utilization For $HOSTNAME”<br>        df -h<br>    }<br></code><br>分支选择</p>\n<p>分支选择有两种方法，if..else 和 case，分别介绍：<br><i>if..else</i><br>语法形式：<br><code><br>    if [condition];then<br>        commands<br>    elif [contidion];then<br>        commands<br>    else<br>        commands<br>    fi<br></code><br><i>case..esac</i><br>语法形式：<br><code><br>    case word in<br>        pattern1)  commands;;<br>        pattern2)  commands;;<br>    esac<br></code></p>\n<p>Test 命令</p>\n<p>文件表达式</p>\n<p><br>    表达式                       如果下列条件为真则返回True<br>    file1 -ef file2             file1和file2拥有相同的索引号（通过硬连接两个文件指向相同的文件<br>    file1 -nt file2                file1新于file2<br>    file1 -ot file2                file1早于filt2<br>    -b file                        file存在并且是一个块（设备）文件<br>    -c file                        file存在奶并且是一个字符（设备）文件<br>    -d file                        file存在且为目录<br>    -e file                        file存在<br>    -f file                     file存在且是一个普通文件<br>    -g file                        file存在且设置了组ID<br>    -G file                     file存在且由有效组ID拥有<br>    -L file                     file存在且是一个符号链接<br>    -p file                     file存在且是一个命名管道<br>    -r file                     file存在且可读<br>    -s file                     file存在且其长度大于零<br>    -S file                     file存在且是一个网络socket<br>    -w file                     file存在且可写<br>    -x file                     file存在且可执行<br></p>\n\n<p>字符串表达式</p>\n<p><br>    表达式                       如果下列条件为真则返回True<br>    string                       string不为null<br>    -n string                    字符串string的长度大于零<br>    -z string             字符串string的长度为零<br>    string1 == string2         两个字符串相等，此处用单等号也可以，不过推荐==<br>    string1 != string2         两个字符串不等<br>    string1 &gt; string2         string1排列在string2之后<br>    string1 &lt; string2         string1排列在string2之前<br></p>\n\n<p>整型表达式 </p>\n<p><br>    表达式                       如果为真<br>    int1 -eq int2                相等<br>    int1 -ne int2             不等<br>    int1 -lt int2             int1小于int2<br>    int1 -le int2             int1小于等于int2<br>    int1 -gt int2                 int1大于int2<br>    int1 -ge int2             int1大于等于int2<br></p>\n\n<p>Compound Command 复合命令<br><code>[[ expression ]]</code><br>支持test所有表达式 ，但是增加了正则匹配：<br><code>string1 =~ pattern</code><br>因此能用这种就尽量用这种。</p>\n<p>(())–为整数设计<br>专门用于执行整数之间的操作，变量可以不用展开，直接使用名字</p>\n<p>逻辑操作符</p>\n<p>操作符            测试        [[]] and (())<br>AND            -a            &amp;&amp;<br>OR            -o            ||<br>NOT            !            !</p>\n<p>控制操作符：分支的另一种方法<br>很酷的用法，也可以进行防卫性编程。<br>cmd1 &amp;&amp; cmd2先执行cmd1，并且只有cmd1执行成功才会执行cmd2<br>cmd1 || cmd2先执行cmd1，只有cmd1执行失败才会执行cmd2</p>\n<p>读取键盘输入<br>使用read命令读取键盘输入，语法：<br>    read [-options] [variables…]<br>如果没提供变量名，shell变量REPLY会包含所有数据行。<br>IFS<br>通常shell对输入按空格，tab，换行符进行切分，可以通过更改IFS对输入进行分离：<br>        IFS=”:”  read value1 value1 &lt;&lt;&lt; “$info”<br><i>You can’t Pipe read, 你不能把管道用你在read上</i></p>\n<p>循环控制<br>循环有三种方式：<br><i>while</i><br>语法：<br><code><br>    while condition;do<br>        commands<br>    done<br></code><br><i>until</i><br>语法：<br><code><br>    until contidion;do<br>        commands<br>    done<br></code><br>while 和 until两者的区别：<br>while在contidion成立时循环，直到不成立时退出；until相反。<br><i>for</i><br>for循环有两种：<br>1.<br><code><br>    for i in a b c d;do<br>        echo $i<br>    done<br></code><br>2.<br><code><br>    for ((i=0; i&lt;5; ++i));do<br>        echo $i<br>    done<br></code><br>跳出循环的命令break和continue，和Python机理相同。</p>\n<p>位置参数</p>\n<p>$0表示脚本完整名字，$1,$2等等表示用来表示位置参数。<br>shift命令可以向后移动一次$1的指向，原来的$2变成$1,对于多个输入参数的处理很有用。</p>\n<p>数组<br>创建数组的方式：<br>1.<br><code><br>    arr[1]=”foo”<br>    arr[2]=”bar”<br></code></p>\n<p>2.<br><code>arr=(“foo” “bar”)</code></p>\n<p>简单的shell脚本没啥问题了，更复杂的还要实际生产中去历练。不过目前工作中shell基本用不到太高深的东西，所以这些基本上也够了，主要精力要用来熟悉并掌握linux环境下的开发，部署，维护上。新买了一本《Linux Shell脚本攻略》，好好研读。而这本《The Linux Command Line》的网页版，刚好可以利用地铁上的时间来重温复习一遍。</p>\n","text":"花了点时间把《The Linux command line》这本书最后部分看完了—shell脚本编程，总结于此，加深印象。脚本第一行需要告诉操作系统用什么解释器来执行我们的脚本，即shebang:<br>#!/bin/bash<br>定义变量，”=”两边不能有空格，使用变量需要加","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}]},{"title":"Introduction to tcpdump","slug":"Introduction-to-tcpdump","date":"2018-04-29T09:08:22.000Z","updated":"2018-04-29T10:10:58.791Z","comments":true,"path":"api/articles/Introduction-to-tcpdump.json","excerpt":"","keywords":null,"cover":null,"content":"<p>网络编程出异常的时候，常用的调试办法一定包含抓包。抓取请求和响应的内容，才能定位问题出在哪里。<br>这几天学习了一下tcpdump命令，不得不说，简直是抓包神器啊。下面开始正文。</p>\n<p>man手册中介绍tcpdump：dump traffic on a network.顾名思义，就是抓取网络中信息流。</p>\n<p>我经常用的选项：<br>-A: 以ASCII形式打印抓到的每一个包，但是如果加密了就没办法<br>-c: 后面接数字，抓到指定数量包后就退出<br>-i: 指定监听的网络接口。一般用”-i any”表示监听所有网络接口的数据<br>-nn: 不要把主机地址和端口转换成名字，即保留数字形式<br>-r: 读取文件<br>-s: 限定包的长度，”-s 0”表示抓取完整长度的包<br>-tttt: 打印人类可读的时间<br>-vvv: 使包的信息尽可能详细<br>-w: 把抓到的包写入文件中<br>-X: 以16进制和ASCII的形式输出</p>\n<p>还可以指定主机，端口，网络：<br>host: 指定主机<br>port: 指定端口<br>net: 指定网络<br>src: 包来源<br>dst: 包目的地</p>\n<p>还可以用逻辑表达式组合一系列选项：<br>“and” “or” “not”</p>\n<p>tcpdump一般的输出形式：<br>  src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len</p>\n<p>以我目前的水平只能解释到这里了，man手册后半部分比较深入，由于自己对TCP的原理还不够了解，看不太明白…<br>以上基本的用法掌握了，对于工作中遇到的大部分问题其实也够用了。后续有时间再好好研读HTTP权威指南等大部头，彻底搞懂网络请求的每一个细节！</p>\n","text":"网络编程出异常的时候，常用的调试办法一定包含抓包。抓取请求和响应的内容，才能定位问题出在哪里。<br>这几天学习了一下tcpdump命令，不得不说，简直是抓包神器啊。下面开始正文。man手册中介绍tcpdump：dump traffic on a network.顾名思义，就是抓","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}]},{"title":"给博客搬家啦","slug":"给博客搬家啦","date":"2018-04-28T17:18:33.000Z","updated":"2018-04-29T05:26:00.099Z","comments":true,"path":"api/articles/给博客搬家啦.json","excerpt":"","keywords":null,"cover":null,"content":"<p>之前学狗书的时候用flask + heroku 做了一个简易博客，实在是太简陋了一些，因此决定迁移到github.io.<br>一是免费，二是部署简洁，三是有很多现成的优美主题可供选择。<br>以后要经常在博客上记录学到的东西，有益于对知识的进一步掌握和理解。<br>加油！<br>这段时间心无旁骛的提高自己。不要在杂事上耗费心神了，提高到一定程度再去想，否则只是浪费时间自取其辱罢了。<br>时不我待！</p>\n","text":"之前学狗书的时候用flask + heroku 做了一个简易博客，实在是太简陋了一些，因此决定迁移到github.io.<br>一是免费，二是部署简洁，三是有很多现成的优美主题可供选择。<br>以后要经常在博客上记录学到的东西，有益于对知识的进一步掌握和理解。<br>加油！<br","link":"","raw":null,"photos":[],"categories":[{"name":"Life","slug":"Life","count":1,"path":"api/categories/Life.json"}],"tags":[{"name":"生活","slug":"生活","count":1,"path":"api/tags/生活.json"}]}]}