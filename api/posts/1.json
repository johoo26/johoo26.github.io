{"total":9,"pageSize":10,"pageCount":1,"data":[{"title":"beginner to Django 5","slug":"beginner-to-Django-5","date":"2018-11-21T00:17:00.000Z","updated":"2018-11-22T14:49:09.114Z","comments":true,"path":"api/articles/beginner-to-Django-5.json","excerpt":"","keywords":null,"cover":null,"content":"<p>接下来要介绍静态文件的使用：添加CSS和背景图片。</p>\n<p><code>django.contrib.staticfiles</code>这个应用（在INSTALLED_APPS中）从每个应用中搜集静态文件并放到同一个位置以用于生产环境。Django的<code>STATICFILES_FINDERS</code>设置包含一系列用来搜寻静态文件的工具，其中默认的是AppDirectoriesFinder, 其会在每个应用中寻找叫做static的子目录。因此，在polls目录下建立一个子目录static, 出于名称空间的考虑，在其中再建立一个polls子目录，而后在子目录中创建文件style.css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* polls/static/polls/style.css */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着将样式加到polls/templates/polls/index.htm中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load static %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static  'polls/style.css' %&#125;\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动服务，访问<a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a>  可以看到最新效果。</p>\n<p>“% static %” 用于生成静态文件的绝对路经。</p>\n<p>而后在polls/statis/polls中再建立一个子目录：images, 在其中放入一张图片:background.gif, 而后更新样式:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white <span class=\"built_in\">url</span>(<span class=\"string\">'images/background.gif'</span>) no-repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动服务，访问<a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a> ，可以看到背景图片展示在左上角。</p>\n","text":"接下来要介绍静态文件的使用：添加CSS和背景图片。django.contrib.staticfiles这个应用（在INSTALLED_APPS中）从每个应用中搜集静态文件并放到同一个位置以用于生产环境。Django的STATICFILES_FINDERS设置包含一系列用来搜寻静态","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":5,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 4","slug":"beginner-to-Django-4","date":"2018-11-19T05:16:28.000Z","updated":"2018-11-20T15:20:52.982Z","comments":true,"path":"api/articles/beginner-to-Django-4.json","excerpt":"","keywords":null,"cover":null,"content":"<p>接下来是处理表单请求，以及怎么样用更少的代码去实现视图。</p>\n<p>改写<code>polls/detail.html</code>, 加上表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if error_message %&#125;<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"&#123;% url 'polls:vote' question.id %&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">&#123;% csrf_token %&#125;</span><br><span class=\"line\">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"choice\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; choice.id &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Vote\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>表单的意思就不解释了，懂点HTML就能看得懂。</p>\n<p>“csrf_token”的作用是防止跨站伪造请求攻击。</p>\n<p>以上表单数据通过POST方式发送到polls:vote这个url, 接着把对应的视图函数实现了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404, HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        selected_choice = question.choice_set.get(pk=request.POST[<span class=\"string\">'choice'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'question'</span>: question,</span><br><span class=\"line\">            <span class=\"string\">'error_message'</span>: <span class=\"string\">\"You didn't select a choice!\"</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        selected_choice.votes += <span class=\"number\">1</span></span><br><span class=\"line\">        selected_choice.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponseRedirect(reverse(<span class=\"string\">'polls:results'</span>, args=(question.id, )))</span><br></pre></td></tr></table></figure>\n<p>通过从request.POST中找到表单传递进来的choiceID, 来找到selected_choice, 并将投票数增1. 要注意的一个地方是，处理完POST请求后一定要重定向到其他页面，防止用户反复提交表单。</p>\n<p>reverse函数的作用是构建url。</p>\n<p>由于要重定向到polls:results, 因此这里也要修改：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404, HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">result</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/results.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p>相应的polls/results.html如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'polls:detail' question.id %&#125;\"</span>&gt;</span>Vote again?<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>观察polls/views.py，可以发现index, detail, result这3个视图函数非常相似：根据url中的参数，从数据库中查询出相应结果，渲染模板得到响应。由于这种操作实在是太常见，Django提供了generic views(一般视图)这种方法来减少代码量。</p>\n<p>首先修改视图：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404, HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.views <span class=\"keyword\">import</span> generic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexView</span><span class=\"params\">(generic.ListView)</span>:</span></span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/index.html'</span></span><br><span class=\"line\">    context_object_name = <span class=\"string\">'latest_question_list'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/detail.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultsView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/results.html'</span></span><br></pre></td></tr></table></figure>\n<p>然后修改<code>polls/urls.py</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">app_name = <span class=\"string\">'polls'</span></span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.IndexView.as_view(), name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:pk&gt;/'</span>, views.DetailView.as_view(), name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:pk&gt;/results/'</span>, views.ResultsView.as_view(), name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>ListView</code>和<code>DetailView</code>分别查找“符合条件的对象组成的列表”和“符合条件的特定对象”。</p>\n<p><code>DetailView</code>根据url中pk参数的值去数据库中查找，所以把url中question_id替换成pk.</p>\n<p><code>DetailView</code>默认查找的模板格式为：&lt;app_name&gt;/&lt;model_name&gt;_detail.html, 因为把我们想要用的模板传递给<code>template_name</code>参数来告诉Django用指定的模板。</p>\n<p><code>DetailView</code>默认用model名字来做上下文对象的名字，而<code>ListView</code>默认的上下文对象名字是:&lt;modelname_list&gt;, 即 question_list, 这显然和模板不符，因此定义context_object_name变量来改写这一问题。</p>\n<p>说实话，我个人觉得这个generiv views并没有什么特别的优势吸引我使用。反而把简单的事情搞复杂了。见仁见智吧。</p>\n","text":"接下来是处理表单请求，以及怎么样用更少的代码去实现视图。改写polls/detail.html, 加上表单：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>&lt;h1&gt;&#123;&#123; ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":5,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 3","slug":"beginner-to-Django-3","date":"2018-11-16T10:25:38.000Z","updated":"2018-11-16T12:08:19.506Z","comments":true,"path":"api/articles/beginner-to-Django-3.json","excerpt":"","keywords":null,"cover":null,"content":"<p>接下来进入视图部分。</p>\n<p>在<code>polls/views.py</code>中创建几个view funcs:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'Hello Django!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'You are looking at question %s'</span> % question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">result</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'You are looking at the result of question %s'</span> % question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'You are voting on question %s'</span> % question_id)</span><br></pre></td></tr></table></figure>\n<p>然后在<code>polls/urls.py</code>中构建url到view func的映射：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/results/'</span>, views.result, name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>然后分别访问<a href=\"http://localhost:8000/polls/1/，\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/1/，</a> <a href=\"http://localhost:8000/polls/1/results/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/1/results/</a>, <a href=\"http://localhost:8000/polls/1/vote/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/1/vote/</a>  就可以看到对应结果了。</p>\n<p>由于我们在<code>settings.py</code>中设置了<code>ROOT_URLCONF = &#39;myproj.urls&#39;</code>， 因此请求会首先找到<code>myproj/urls.py</code>,  在那里匹配到polls规则后，去掉这部分，转到<code>polls/urls.py</code>中来匹配，遍历<code>urlpatterns</code>中每一个path, 找到第一个匹配的path指定的view， 将request和对应参数传入，得到响应。所以path的顺序很重要。</p>\n<p>OK，流程上应该没问题了，让我们加上模板系统，上点真材实料！</p>\n<p>首先，在polls目录下创建一个子目录templates。这是因为settings.py中设置TEMPLATES的backend为DjangoTemplates， 同时其APP_DIRS也设为True，而DjangoTemplates会在每一个INSTALLED_APPS的目录下寻找templates的子目录。</p>\n<p>然后在templates下再创建一个polls的子目录。在其中新建index.html文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if latest_question_list %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    &#123;% for question in latest_question_list %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/polls/&#123;&#123; question.id &#125;&#125;/\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% else %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>No polls are available.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>修改视图函数index:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> loader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    template = loader.get_template(<span class=\"string\">'polls/index.html'</span>)</span><br><span class=\"line\">    context = &#123;</span><br><span class=\"line\">        <span class=\"string\">'latest_question_list'</span>: latest_question_list,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure>\n<p>去<a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a> 就可以看到最近创建的5个问题了。</p>\n<p>记不记得Flask渲染模板用的是render函数？没错，Django也有…</p>\n<p>改写后的index, 方便多了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    context = &#123;</span><br><span class=\"line\">        <span class=\"string\">'latest_question_list'</span>: latest_question_list,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure>\n<p>如果请求的资源不存在，需要返回404异常的话：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        question = Question.objects.get(pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Question.DoesNotExist:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Http404(<span class=\"string\">'Question donot exist.'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p>或者更快捷一点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p>回到index视图，前面hardcode了一个地方：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/polls/&#123;&#123; question.id &#125;&#125;/\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样很不好，一旦url规则要改，全部都要改，有一个类似于Flask的url_for的方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'detail' question.id %&#125;\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>能这么做的前提，是我们之前在配置url映射的时候，在path函数中设置了name 关键字参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path(<span class=\"string\">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class=\"string\">'detail'</span>)</span><br></pre></td></tr></table></figure>\n<p>这样就不用担心url格式发生变化了。</p>\n<p>但是实际生产环境的项目可能会有很多的apps，可能其他app中也有一个detail的视图，那怎么区分呢？</p>\n<p>办法很简单，namespace–名称空间。</p>\n<p>添加应用的名称空间：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">app_name = <span class=\"string\">'polls'</span></span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/results/'</span>, views.result, name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>修改链接：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'polls:detail' question.id %&#125;\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动服务，一切OK.</p>\n","text":"接下来进入视图部分。在polls/views.py中创建几个view funcs:1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":5,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 2","slug":"beginner-to-Django-2","date":"2018-11-16T07:01:41.000Z","updated":"2018-11-16T08:49:49.139Z","comments":true,"path":"api/articles/beginner-to-Django-2.json","excerpt":"","keywords":null,"cover":null,"content":"<p>今天要涉及的部分是数据库和模型，以及Django自带的admin管理端。</p>\n<p>Django支持很多常见的数据库，我这里选择用MySQL。要能让Django与MySQL交互，Django官方推荐安装mysqlclient–直接pip安装即可。数据库配置在<code>myproj/settings.py</code>中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Database</span></span><br><span class=\"line\"><span class=\"comment\"># https://docs.djangoproject.com/en/2.1/ref/settings/#databases</span></span><br><span class=\"line\"></span><br><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'db_django'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">'3306'</span>,</span><br><span class=\"line\">        <span class=\"string\">'OPTIONS'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'init_command'</span>: <span class=\"string\">\"SET sql_mode='STRICT_TRANS_TABLES'\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要事先在MySQL中创建一个叫db_django的库，创建用户test,密码test,并授予其对应权限</span></span><br><span class=\"line\"><span class=\"comment\"># 此外，Django强烈要求打开MySQL的strict-mode,我查了一下，这个确实很好用，会把很多</span></span><br><span class=\"line\"><span class=\"comment\"># 错误的请求从原来仅仅给出warning调为直接error报错，安全级别更高了</span></span><br></pre></td></tr></table></figure>\n<p>顺便把时区改成自己的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># settings.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">TIME_ZONE = <span class=\"string\">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure>\n<p>注意到<code>myproj/settings.py</code>中这样一个变量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Application definition</span></span><br><span class=\"line\"></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这些是Django默认自带的应用，因为这些基本上所有场景都会用到。如果不需要的话可以注释掉。由于以上apps中有些需要库表，所以执行以下命令进行迁移：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py migrate</span><br></pre></td></tr></table></figure>\n<p>然后就可以在db_django库中看到已经有对应的tables了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql test@localhost:db_django&gt; SHOW tables;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| Tables_in_db_django        |</span><br><span class=\"line\">|----------------------------|</span><br><span class=\"line\">| auth_group                 |</span><br><span class=\"line\">| auth_group_permissions     |</span><br><span class=\"line\">| auth_permission            |</span><br><span class=\"line\">| auth_user                  |</span><br><span class=\"line\">| auth_user_groups           |</span><br><span class=\"line\">| auth_user_user_permissions |</span><br><span class=\"line\">| django_admin_log           |</span><br><span class=\"line\">| django_content_type        |</span><br><span class=\"line\">| django_migrations          |</span><br><span class=\"line\">| django_session             |</span><br><span class=\"line\">+----------------------------+</span><br></pre></td></tr></table></figure>\n<p>migrate命令的作用是根据模型进行数据库同步，它只会同步<code>INSTALLED_APPS</code>中的应用涉及到的库表。</p>\n<p>现在开始创建模型。模型差不多可以认为是数据库的表，只不过能做的事情多得多。这里需要创建两个models: Question 和 Choice. 编辑 <code>polls/models.py</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Question</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    question_text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    pub_date = models.DateTimeField(<span class=\"string\">'date published'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Choice</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class=\"line\">    choice_text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    votes = models.IntegerField(default=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>接下来要让models生效。首先在settings.py中添加我们的polls应用，这样迁移的时候才会执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'polls.app.PollsConfig'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>然后执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py makemigrations polls</span><br><span class=\"line\">Migrations for 'polls':</span><br><span class=\"line\">  polls/migrations/0001_initial.py</span><br><span class=\"line\">    - Create model Choice</span><br><span class=\"line\">    - Create model Question</span><br><span class=\"line\">    - Add field question to choice</span><br></pre></td></tr></table></figure>\n<p>makemigrations命令的作用是告诉Django我对models做了一些改变，需要存到migration中去。可以在<code>polls/migrations/0001_initial.py</code>查看对应内容。这个文件是可以改动的，达到手动控制Django迁移结果的目的。现在执行迁移并修改库表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py migrate</span><br><span class=\"line\">Operations to perform:</span><br><span class=\"line\">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class=\"line\">Running migrations:</span><br><span class=\"line\">  Applying polls.0001_initial... OK</span><br></pre></td></tr></table></figure>\n<p>在MySQL中可以看到创建了两张表：polls_choice,  polls_question.</p>\n<p>使用迁移最大的好处是可以不用手动去修改库表，尤其是线上环境，可以在不影响现有业务的前提下更新库表。</p>\n<p>下面看看Django自带的admin管理端。</p>\n<p>首先创建管理员用户：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n<p>按提示输入用户名，邮箱和密码即可。</p>\n<p>然后在polls/admin.py中注册model - Question，告诉admin其可以在页面上被修改。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Question)</span><br></pre></td></tr></table></figure>\n<p>启动服务后，在<a href=\"http://localhost:8000/admin/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/admin/</a> 页面可以看到Question已经可以编辑了。真的是太方便了！</p>\n","text":"今天要涉及的部分是数据库和模型，以及Django自带的admin管理端。Django支持很多常见的数据库，我这里选择用MySQL。要能让Django与MySQL交互，Django官方推荐安装mysqlclient–直接pip安装即可。数据库配置在myproj/settings.p","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":5,"path":"api/tags/Django.json"}]},{"title":"beginner to Django","slug":"beginner-to-Django-1","date":"2018-11-08T15:56:23.000Z","updated":"2018-11-16T06:57:26.600Z","comments":true,"path":"api/articles/beginner-to-Django-1.json","excerpt":"","keywords":null,"cover":null,"content":"<p>最近在学习Django的使用，把相关的知识点记录下来，毕竟只有经历了比输出更残酷的输入，才算是真正掌握对应的知识点。<br>Django和Flask是Python Web开发框架中使用最多的两个框架，两者最大的不同之处在于，Flask只提供一个强健的内核，而Django则尽可能把所有的工具都集成在自身中，即Battery-included.这样做的好处在于，你无须去互联网上找别人开发的扩展，毕竟扩展开发人员的水平无法保证，出了问题也不一定能得到解决，在Django这里，有一个出色的团队在开发和维护，一切都可控。Django的另一个优点是，规定了包的组织架构，特别适合一个团队一起开发项目时使用，而Flask则很考验开发人员自身的代码架构水平了，遇到水平参差不齐的同事的话，可能会比较痛苦。</p>\n<p>OK，开始跟着Django官网的tutorial学习Django！</p>\n<p>首先创建一个项目project:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ django-admin startproject myproj</span><br></pre></td></tr></table></figure>\n<p>会看到当前目录下多了一个myproj的目录，结构如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) /tmp ❯ tree myproj </span><br><span class=\"line\">myproj</span><br><span class=\"line\">├── manage.py</span><br><span class=\"line\">└── myproj</span><br><span class=\"line\">    ├── __init__.py</span><br><span class=\"line\">    ├── settings.py</span><br><span class=\"line\">    ├── urls.py</span><br><span class=\"line\">    └── wsgi.py</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 5 files</span><br></pre></td></tr></table></figure>\n<p><code>manage.py</code>是一个管理入口，所能做的事情其实和命令 <code>django-admin</code> 是一样的，但<code>manage.py</code>额外为我们做了这几件事：</p>\n<ul>\n<li>将项目的包路经加到<code>sys.path</code>中</li>\n<li>设置环境变量<code>DJANGO_SETTINGS_MODULE</code>，使其指向项目的<code>settings.py</code></li>\n</ul>\n<p>一般来说，单个项目开发的时候使用<code>manage.py</code>会更容易，而如果要在多个项目中跳转，则应使用<code>django-admin</code>.</p>\n<p>里层的myproj目录则是实际的项目包。</p>\n<p><code>myproj/settings.py</code>中放置的是myproj项目的设置，<code>myproj/urls.py</code>是项目的url分配器，<code>myproj/wsgi.py</code>是WSGI服务器运行web_app的入口。</p>\n<p>先启动试一下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p>就可以在<a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/</a>  看到默认页面了。</p>\n<p>需要指出的是，这里启动用的是Django内置的方便开发而设置的服务器，不能用于生产环境。</p>\n<p>现在创建一个投票应用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py startapp polls</span><br></pre></td></tr></table></figure>\n<p>app 是一个项目中具体做事情的部分，项目中可以含有多个app， app也可以置于多个项目中。</p>\n<p>app可以位于任何pythonpath内的路经，这里放在<code>manage.py</code>同一级只是为了导入方便。</p>\n<p>看一下polls的内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ tree polls </span><br><span class=\"line\">polls</span><br><span class=\"line\">├── admin.py</span><br><span class=\"line\">├── apps.py</span><br><span class=\"line\">├── __init__.py</span><br><span class=\"line\">├── migrations</span><br><span class=\"line\">│   └── __init__.py</span><br><span class=\"line\">├── models.py</span><br><span class=\"line\">├── tests.py</span><br><span class=\"line\">└── views.py</span><br></pre></td></tr></table></figure>\n<p><code>startapp</code> 命令自动帮我们生成以上文件，节省了开发人员设计的时间。是不是很方便？</p>\n<p>现在创建一个真正的视图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'Hello Django!'</span>)</span><br></pre></td></tr></table></figure>\n<p>要想访问到index视图函数，需要有url映射到这里来，在<code>polls/views.py</code>同级目录下创建<code>urls.py</code>模块，并写入如下内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>path函数的第一个参数是route, 第二个参数是view func, 关键字参数name是为了便于动态构建url用的。</p>\n<p>这样就可以了吗？当然不行，还在把<code>polls/urls.py</code>注册到<code>myproj/urls.py</code>中才行，因为myproj才是入口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># myproj/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"myproj URL Configuration</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The `urlpatterns` list routes URLs to views. For more information please see:</span></span><br><span class=\"line\"><span class=\"string\">    https://docs.djangoproject.com/en/2.1/topics/http/urls/</span></span><br><span class=\"line\"><span class=\"string\">Examples:</span></span><br><span class=\"line\"><span class=\"string\">Function views</span></span><br><span class=\"line\"><span class=\"string\">    1. Add an import:  from my_app import views</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('', views.home, name='home')</span></span><br><span class=\"line\"><span class=\"string\">Class-based views</span></span><br><span class=\"line\"><span class=\"string\">    1. Add an import:  from other_app.views import Home</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')</span></span><br><span class=\"line\"><span class=\"string\">Including another URLconf</span></span><br><span class=\"line\"><span class=\"string\">    1. Import the include() function: from django.urls import include, path</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path, include</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'polls/'</span>, include(<span class=\"string\">'polls.urls'</span>)),</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    </span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># 上面介绍了3种添加路由的方法，Django推荐用 include， 只有一个例外: admin.</span></span><br><span class=\"line\"><span class=\"comment\"># include函数会把匹配到的url截掉开头匹配的模式后传递给引入的url模块，这样的话</span></span><br><span class=\"line\"><span class=\"comment\"># 前面匹配的模块就不会写死，可以根据需求任意调整成比如 'polls2/', 'fun-polls/'，</span></span><br><span class=\"line\"><span class=\"comment\"># 视图函数完全不用任何改变。</span></span><br></pre></td></tr></table></figure>\n<p>启动server,然后就可以在 <a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a>  看到响应内容”Hello Django!”.</p>\n","text":"最近在学习Django的使用，把相关的知识点记录下来，毕竟只有经历了比输出更残酷的输入，才算是真正掌握对应的知识点。<br>Django和Flask是Python Web开发框架中使用最多的两个框架，两者最大的不同之处在于，Flask只提供一个强健的内核，而Django则尽可能把","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":5,"path":"api/tags/Django.json"}]},{"title":"正则表达式-扩展符号","slug":"正则表达式-扩展符号","date":"2018-05-07T15:20:54.000Z","updated":"2018-05-08T16:27:24.000Z","comments":true,"path":"api/articles/正则表达式-扩展符号.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br><strong>(?iLmsux)</strong><br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">42</span>]: re.findall(<span class=\"string\">r\"(?i)yes\"</span>, <span class=\"string\">\"yes, Yes, YES\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">42</span>]: [<span class=\"string\">'yes'</span>, <span class=\"string\">'Yes'</span>, <span class=\"string\">'YES'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“m”表示把多行作为各个独立体而不是一个整体来判断，因此用^匹配的时候，两行都会命中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">49</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">49</span>]: <span class=\"string\">'the first line,\\nthis is second line'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">50</span>]: re.findall(<span class=\"string\">r\"^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">50</span>]: [<span class=\"string\">'the'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">51</span>]: re.findall(<span class=\"string\">r\"(?m)^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">51</span>]: [<span class=\"string\">'the'</span>, <span class=\"string\">'this'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“s”表示.可以匹配包括换行符在内的所有字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">60</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: re.search(<span class=\"string\">r\"the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: <span class=\"string\">'the first'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">62</span>]: re.search(<span class=\"string\">r\"(?s)the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">62</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br></pre></td></tr></table></figure></p>\n<p>“x”允许对匹配模式换行，加上注释等，使之更易读。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">70</span>]: phonenumber</span><br><span class=\"line\">Out[<span class=\"number\">70</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: re.match(<span class=\"string\">r'''(?x)</span></span><br><span class=\"line\"><span class=\"string\">...:          \\((\\d&#123;3&#125;)\\) #区号</span></span><br><span class=\"line\"><span class=\"string\">...:          \\s+         #空白</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;3&#125;       #前缀</span></span><br><span class=\"line\"><span class=\"string\">...:          -           #横线</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;4&#125;       #尾号</span></span><br><span class=\"line\"><span class=\"string\">...:          '''</span>, phonenumber).group()</span><br><span class=\"line\">Out[<span class=\"number\">71</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>(?:…) </strong>可以对部分正则表达式分组，但是并不会保存该分组用于后续的检查或者应用<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">3</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"string\">'http://google.com http://www.google.com http://code.google.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: re.findall(<span class=\"string\">r\"http://(\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: [(<span class=\"string\">''</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'www.'</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'code.'</span>, <span class=\"string\">'google.com'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">5</span>]: re.findall(<span class=\"string\">r\"http://(?:\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">5</span>]: [<span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>(?P<name>)</name></strong>通过名称来保存匹配到的分组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">11</span>]: re.search(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"2018-5-8\"</span>).groupdict()</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: &#123;<span class=\"string\">'year'</span>: <span class=\"string\">'2018'</span>, <span class=\"string\">'month'</span>: <span class=\"string\">'5'</span>, <span class=\"string\">'day'</span>: <span class=\"string\">'8'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: re.sub(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"\\g&lt;month&gt;-\\g&lt;day&gt;-\\g&lt;year&gt;\"</span>,<span class=\"string\">\"2018-5-8\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">12</span>]: <span class=\"string\">'5-8-2018'</span></span><br></pre></td></tr></table></figure></p>\n<p>在sub函数中可以通过”\\g&lt;year>“表示匹配到的分组year，而不用\\num来表示。<br><br><br><strong>(?=…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">13</span>]: re.findall(<span class=\"string\">r\"\\w+ (?=van Rossum)\"</span>, <span class=\"string\">\"Guido van Rossum, Just van Rossum, Kay Ring\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: [<span class=\"string\">'Guido '</span>, <span class=\"string\">'Just '</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\w+ (?=van Rossum)\"</span>模式，表示只有后接<span class=\"string\">\"van Rossum\"</span>的<span class=\"string\">\"\\w+ \"</span>才匹配。</span><br></pre></td></tr></table></figure></p>\n<p><br><br><strong>(?!…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">22</span>]: re.findall(<span class=\"string\">r\"Emma (?!test)\"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">22</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">23</span>]: re.findall(<span class=\"string\">r\"Emma \"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">23</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"><span class=\"string\">\"Emma (?!test)\"</span>模式 ，表示只有后面不是接<span class=\"string\">\"test\"</span>的<span class=\"string\">\"Emma \"</span>才会匹配。</span><br></pre></td></tr></table></figure></p>\n","text":"Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br>(?iLmsux)<br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br>1<br>2<br>In [42]: re.findall(","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Python","slug":"Python","count":6,"path":"api/tags/Python.json"}]},{"title":"简单总结一下近期学习的shell脚本编程","slug":"简单总结一下近期学习的shell脚本编程","date":"2018-05-01T06:58:47.000Z","updated":"2018-05-01T11:29:07.000Z","comments":true,"path":"api/articles/简单总结一下近期学习的shell脚本编程.json","excerpt":"","keywords":null,"cover":null,"content":"<p>花了点时间把《The Linux command line》这本书最后部分看完了—shell脚本编程，总结于此，加深印象。</p>\n<p>脚本第一行需要告诉操作系统用什么解释器来执行我们的脚本，即shebang:<br><code>#!/bin/bash</code><br>定义变量，”=”两边不能有空格，使用变量需要加上前缀”$”来展开:<br><code><br>    foo=emma<br>    echo $foo<br></code></p>\n<p>shell函数,定义语法有两种：<br><code><br>    a)function name {<br>    commands<br>    return<br>    }<br>    b)name () {<br>    commands<br>    return<br>    }<br></code><br>函数的定义必须在使用之前，因此最好在脚本开头把函数全部定义好。<br>局部变量：<br><code><br>    foo=0<br>    func1 () {<br>        local foo<br>        foo=1<br>        echo “func1:foo = $foo”<br>    }<br>    func2 () {<br>        local foo<br>        foo=2<br>        echo “func2:foo = $foo”<br>    }<br>    echo “global: foo = $foo”<br>    func1<br>    echo “global: foo = $foo”<br>    func2<br>    echo “global: foo = $foo”<br></code><br>运行结果：<br><code><br>    jo@Arch  ~  hello.sh<br>    global: foo = 0<br>    func1:foo = 1<br>    global: foo = 0<br>    func2:foo = 2<br>    global: foo = 0<br></code><br>可见，在函数内通过local命令可以定义局部变量，局部变量仅对其所在的函数起作用。<br>Shell Functions In Your .bashrc File<br>shell函数完美的替代了别名，并且实际上是创建个人所用的小命令的首选方法。别名非常局限于命令的种类和它们支持的shell功能，然而 shell函数允许任何可以编写脚本的东西。例如，如果我们喜欢为我们的脚本开发的这个 report_disk_space shell 函数，我们可以为我们的.bashrc 文件 创建一个相似的名为 ds 的函数：<br><code><br>    ds () {<br>        echo “Disk Space Utilization For $HOSTNAME”<br>        df -h<br>    }<br></code><br>分支选择</p>\n<p>分支选择有两种方法，if..else 和 case，分别介绍：<br><i>if..else</i><br>语法形式：<br><code><br>    if [condition];then<br>        commands<br>    elif [contidion];then<br>        commands<br>    else<br>        commands<br>    fi<br></code><br><i>case..esac</i><br>语法形式：<br><code><br>    case word in<br>        pattern1)  commands;;<br>        pattern2)  commands;;<br>    esac<br></code></p>\n<p>Test 命令</p>\n<p>文件表达式</p>\n<p><br>    表达式                       如果下列条件为真则返回True<br>    file1 -ef file2             file1和file2拥有相同的索引号（通过硬连接两个文件指向相同的文件<br>    file1 -nt file2                file1新于file2<br>    file1 -ot file2                file1早于filt2<br>    -b file                        file存在并且是一个块（设备）文件<br>    -c file                        file存在奶并且是一个字符（设备）文件<br>    -d file                        file存在且为目录<br>    -e file                        file存在<br>    -f file                     file存在且是一个普通文件<br>    -g file                        file存在且设置了组ID<br>    -G file                     file存在且由有效组ID拥有<br>    -L file                     file存在且是一个符号链接<br>    -p file                     file存在且是一个命名管道<br>    -r file                     file存在且可读<br>    -s file                     file存在且其长度大于零<br>    -S file                     file存在且是一个网络socket<br>    -w file                     file存在且可写<br>    -x file                     file存在且可执行<br></p>\n\n<p>字符串表达式</p>\n<p><br>    表达式                       如果下列条件为真则返回True<br>    string                       string不为null<br>    -n string                    字符串string的长度大于零<br>    -z string             字符串string的长度为零<br>    string1 == string2         两个字符串相等，此处用单等号也可以，不过推荐==<br>    string1 != string2         两个字符串不等<br>    string1 &gt; string2         string1排列在string2之后<br>    string1 &lt; string2         string1排列在string2之前<br></p>\n\n<p>整型表达式 </p>\n<p><br>    表达式                       如果为真<br>    int1 -eq int2                相等<br>    int1 -ne int2             不等<br>    int1 -lt int2             int1小于int2<br>    int1 -le int2             int1小于等于int2<br>    int1 -gt int2                 int1大于int2<br>    int1 -ge int2             int1大于等于int2<br></p>\n\n<p>Compound Command 复合命令<br><code>[[ expression ]]</code><br>支持test所有表达式 ，但是增加了正则匹配：<br><code>string1 =~ pattern</code><br>因此能用这种就尽量用这种。</p>\n<p>(())–为整数设计<br>专门用于执行整数之间的操作，变量可以不用展开，直接使用名字</p>\n<p>逻辑操作符</p>\n<p>操作符            测试        [[]] and (())<br>AND            -a            &amp;&amp;<br>OR            -o            ||<br>NOT            !            !</p>\n<p>控制操作符：分支的另一种方法<br>很酷的用法，也可以进行防卫性编程。<br>cmd1 &amp;&amp; cmd2先执行cmd1，并且只有cmd1执行成功才会执行cmd2<br>cmd1 || cmd2先执行cmd1，只有cmd1执行失败才会执行cmd2</p>\n<p>读取键盘输入<br>使用read命令读取键盘输入，语法：<br>    read [-options] [variables…]<br>如果没提供变量名，shell变量REPLY会包含所有数据行。<br>IFS<br>通常shell对输入按空格，tab，换行符进行切分，可以通过更改IFS对输入进行分离：<br>        IFS=”:”  read value1 value1 &lt;&lt;&lt; “$info”<br><i>You can’t Pipe read, 你不能把管道用你在read上</i></p>\n<p>循环控制<br>循环有三种方式：<br><i>while</i><br>语法：<br><code><br>    while condition;do<br>        commands<br>    done<br></code><br><i>until</i><br>语法：<br><code><br>    until contidion;do<br>        commands<br>    done<br></code><br>while 和 until两者的区别：<br>while在contidion成立时循环，直到不成立时退出；until相反。<br><i>for</i><br>for循环有两种：<br>1.<br><code><br>    for i in a b c d;do<br>        echo $i<br>    done<br></code><br>2.<br><code><br>    for ((i=0; i&lt;5; ++i));do<br>        echo $i<br>    done<br></code><br>跳出循环的命令break和continue，和Python机理相同。</p>\n<p>位置参数</p>\n<p>$0表示脚本完整名字，$1,$2等等表示用来表示位置参数。<br>shift命令可以向后移动一次$1的指向，原来的$2变成$1,对于多个输入参数的处理很有用。</p>\n<p>数组<br>创建数组的方式：<br>1.<br><code><br>    arr[1]=”foo”<br>    arr[2]=”bar”<br></code></p>\n<p>2.<br><code>arr=(“foo” “bar”)</code></p>\n<p>简单的shell脚本没啥问题了，更复杂的还要实际生产中去历练。不过目前工作中shell基本用不到太高深的东西，所以这些基本上也够了，主要精力要用来熟悉并掌握linux环境下的开发，部署，维护上。新买了一本《Linux Shell脚本攻略》，好好研读。而这本《The Linux Command Line》的网页版，刚好可以利用地铁上的时间来重温复习一遍。</p>\n","text":"花了点时间把《The Linux command line》这本书最后部分看完了—shell脚本编程，总结于此，加深印象。脚本第一行需要告诉操作系统用什么解释器来执行我们的脚本，即shebang:<br>#!/bin/bash<br>定义变量，”=”两边不能有空格，使用变量需要加","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}]},{"title":"Introduction to tcpdump","slug":"Introduction-to-tcpdump","date":"2018-04-29T09:08:22.000Z","updated":"2018-04-29T10:10:58.000Z","comments":true,"path":"api/articles/Introduction-to-tcpdump.json","excerpt":"","keywords":null,"cover":null,"content":"<p>网络编程出异常的时候，常用的调试办法一定包含抓包。抓取请求和响应的内容，才能定位问题出在哪里。<br>这几天学习了一下tcpdump命令，不得不说，简直是抓包神器啊。下面开始正文。</p>\n<p>man手册中介绍tcpdump：dump traffic on a network.顾名思义，就是抓取网络中信息流。</p>\n<p>我经常用的选项：<br>-A: 以ASCII形式打印抓到的每一个包，但是如果加密了就没办法<br>-c: 后面接数字，抓到指定数量包后就退出<br>-i: 指定监听的网络接口。一般用”-i any”表示监听所有网络接口的数据<br>-nn: 不要把主机地址和端口转换成名字，即保留数字形式<br>-r: 读取文件<br>-s: 限定包的长度，”-s 0”表示抓取完整长度的包<br>-tttt: 打印人类可读的时间<br>-vvv: 使包的信息尽可能详细<br>-w: 把抓到的包写入文件中<br>-X: 以16进制和ASCII的形式输出</p>\n<p>还可以指定主机，端口，网络：<br>host: 指定主机<br>port: 指定端口<br>net: 指定网络<br>src: 包来源<br>dst: 包目的地</p>\n<p>还可以用逻辑表达式组合一系列选项：<br>“and” “or” “not”</p>\n<p>tcpdump一般的输出形式：<br>  src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len</p>\n<p>以我目前的水平只能解释到这里了，man手册后半部分比较深入，由于自己对TCP的原理还不够了解，看不太明白…<br>以上基本的用法掌握了，对于工作中遇到的大部分问题其实也够用了。后续有时间再好好研读HTTP权威指南等大部头，彻底搞懂网络请求的每一个细节！</p>\n","text":"网络编程出异常的时候，常用的调试办法一定包含抓包。抓取请求和响应的内容，才能定位问题出在哪里。<br>这几天学习了一下tcpdump命令，不得不说，简直是抓包神器啊。下面开始正文。man手册中介绍tcpdump：dump traffic on a network.顾名思义，就是抓","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}]},{"title":"给博客搬家啦","slug":"给博客搬家啦","date":"2018-04-28T17:18:33.000Z","updated":"2018-04-29T05:26:00.000Z","comments":true,"path":"api/articles/给博客搬家啦.json","excerpt":"","keywords":null,"cover":null,"content":"<p>之前学狗书的时候用flask + heroku 做了一个简易博客，实在是太简陋了一些，因此决定迁移到github.io.<br>一是免费，二是部署简洁，三是有很多现成的优美主题可供选择。<br>以后要经常在博客上记录学到的东西，有益于对知识的进一步掌握和理解。<br>加油！<br>这段时间心无旁骛的提高自己。不要在杂事上耗费心神了，提高到一定程度再去想，否则只是浪费时间自取其辱罢了。<br>时不我待！</p>\n","text":"之前学狗书的时候用flask + heroku 做了一个简易博客，实在是太简陋了一些，因此决定迁移到github.io.<br>一是免费，二是部署简洁，三是有很多现成的优美主题可供选择。<br>以后要经常在博客上记录学到的东西，有益于对知识的进一步掌握和理解。<br>加油！<br","link":"","raw":null,"photos":[],"categories":[{"name":"Life","slug":"Life","count":1,"path":"api/categories/Life.json"}],"tags":[{"name":"生活","slug":"生活","count":1,"path":"api/tags/生活.json"}]}]}