{"title":"正则表达式-扩展符号","slug":"正则表达式-扩展符号","date":"2018-05-07T15:20:54.000Z","updated":"2018-05-08T16:27:24.000Z","comments":true,"path":"api/articles/正则表达式-扩展符号.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br><strong>(?iLmsux)</strong><br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">42</span>]: re.findall(<span class=\"string\">r\"(?i)yes\"</span>, <span class=\"string\">\"yes, Yes, YES\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">42</span>]: [<span class=\"string\">'yes'</span>, <span class=\"string\">'Yes'</span>, <span class=\"string\">'YES'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“m”表示把多行作为各个独立体而不是一个整体来判断，因此用^匹配的时候，两行都会命中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">49</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">49</span>]: <span class=\"string\">'the first line,\\nthis is second line'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">50</span>]: re.findall(<span class=\"string\">r\"^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">50</span>]: [<span class=\"string\">'the'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">51</span>]: re.findall(<span class=\"string\">r\"(?m)^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">51</span>]: [<span class=\"string\">'the'</span>, <span class=\"string\">'this'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“s”表示.可以匹配包括换行符在内的所有字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">60</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: re.search(<span class=\"string\">r\"the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: <span class=\"string\">'the first'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">62</span>]: re.search(<span class=\"string\">r\"(?s)the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">62</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br></pre></td></tr></table></figure></p>\n<p>“x”允许对匹配模式换行，加上注释等，使之更易读。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">70</span>]: phonenumber</span><br><span class=\"line\">Out[<span class=\"number\">70</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: re.match(<span class=\"string\">r'''(?x)</span></span><br><span class=\"line\"><span class=\"string\">...:          \\((\\d&#123;3&#125;)\\) #区号</span></span><br><span class=\"line\"><span class=\"string\">...:          \\s+         #空白</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;3&#125;       #前缀</span></span><br><span class=\"line\"><span class=\"string\">...:          -           #横线</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;4&#125;       #尾号</span></span><br><span class=\"line\"><span class=\"string\">...:          '''</span>, phonenumber).group()</span><br><span class=\"line\">Out[<span class=\"number\">71</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>(?:…) </strong>可以对部分正则表达式分组，但是并不会保存该分组用于后续的检查或者应用<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">3</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"string\">'http://google.com http://www.google.com http://code.google.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: re.findall(<span class=\"string\">r\"http://(\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: [(<span class=\"string\">''</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'www.'</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'code.'</span>, <span class=\"string\">'google.com'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">5</span>]: re.findall(<span class=\"string\">r\"http://(?:\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">5</span>]: [<span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>(?P<name>)</name></strong>通过名称来保存匹配到的分组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">11</span>]: re.search(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"2018-5-8\"</span>).groupdict()</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: &#123;<span class=\"string\">'year'</span>: <span class=\"string\">'2018'</span>, <span class=\"string\">'month'</span>: <span class=\"string\">'5'</span>, <span class=\"string\">'day'</span>: <span class=\"string\">'8'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: re.sub(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"\\g&lt;month&gt;-\\g&lt;day&gt;-\\g&lt;year&gt;\"</span>,<span class=\"string\">\"2018-5-8\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">12</span>]: <span class=\"string\">'5-8-2018'</span></span><br></pre></td></tr></table></figure></p>\n<p>在sub函数中可以通过”\\g&lt;year>“表示匹配到的分组year，而不用\\num来表示。<br><br><br><strong>(?=…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">13</span>]: re.findall(<span class=\"string\">r\"\\w+ (?=van Rossum)\"</span>, <span class=\"string\">\"Guido van Rossum, Just van Rossum, Kay Ring\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: [<span class=\"string\">'Guido '</span>, <span class=\"string\">'Just '</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\w+ (?=van Rossum)\"</span>模式，表示只有后接<span class=\"string\">\"van Rossum\"</span>的<span class=\"string\">\"\\w+ \"</span>才匹配。</span><br></pre></td></tr></table></figure></p>\n<p><br><br><strong>(?!…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">22</span>]: re.findall(<span class=\"string\">r\"Emma (?!test)\"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">22</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">23</span>]: re.findall(<span class=\"string\">r\"Emma \"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">23</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"><span class=\"string\">\"Emma (?!test)\"</span>模式 ，表示只有后面不是接<span class=\"string\">\"test\"</span>的<span class=\"string\">\"Emma \"</span>才会匹配。</span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Python","slug":"Python","count":7,"path":"api/tags/Python.json"}]}