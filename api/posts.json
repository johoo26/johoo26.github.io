{"total":11,"pageSize":10,"pageCount":2,"data":[{"title":"Dive into flask: journey of one request","slug":"Dive-into-flask-the-journey-of-one-request","date":"2018-11-30T05:21:05.000Z","updated":"2018-12-02T08:40:58.868Z","comments":true,"path":"api/articles/Dive-into-flask-the-journey-of-one-request.json","excerpt":"","keywords":null,"cover":null,"content":"<p>一直对Flask的实现机制很好奇，本着知其然更要知其所以然的态度，我将基于一个简单的HTTP请求来分析分析Flask的源码，看看是如何从请求变成响应的。</p>\n<p>Flask是基于WSGI协议实现的Python Web开发框架，我不会介绍什么是WSGI协议，请看: <a href=\"https://www.python.org/dev/peps/pep-3333/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-3333/</a></p>\n<p>一个典型的flask application如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello &#123;&#125;\"</span>.format(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/hi')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hi</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hi~'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=<span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>\n<p>基本过程如下：</p>\n<ol>\n<li>创建Flask类的实例，即app这个应用；</li>\n<li>用app.route装饰器来构建url映射；</li>\n<li>收到请求，确定对应的视图函数，调用视图函数得到响应并返回给服务器，而后再由服务器返回给客户端，一次请求结束。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(__name__)</span><br></pre></td></tr></table></figure>\n<p><strong>以上这一步做了什么？</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># flask/app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flask</span><span class=\"params\">(_PackageBoundObject)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#: The class that is used for request objects.  See :class:`~flask.Request`</span></span><br><span class=\"line\">    <span class=\"comment\">#: for more information.</span></span><br><span class=\"line\">    request_class = Request</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#: The class that is used for response objects.  See</span></span><br><span class=\"line\">    <span class=\"comment\">#: :class:`~flask.Response` for more information.</span></span><br><span class=\"line\">    response_class = Response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#: The rule object to use for URL rules created.  This is used by</span></span><br><span class=\"line\">    <span class=\"comment\">#: :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.</span></span><br><span class=\"line\">    <span class=\"comment\">#:</span></span><br><span class=\"line\">    <span class=\"comment\">#: .. versionadded:: 0.7</span></span><br><span class=\"line\">    url_rule_class = Rule</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        import_name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        static_url_path=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        static_folder=<span class=\"string\">'static'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        static_host=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        host_matching=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        subdomain_matching=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        template_folder=<span class=\"string\">'templates'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        instance_path=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        instance_relative_config=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        root_path=None</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span>:</span></span><br><span class=\"line\">        _PackageBoundObject.__init__(</span><br><span class=\"line\">            self,</span><br><span class=\"line\">            import_name,</span><br><span class=\"line\">            template_folder=template_folder,</span><br><span class=\"line\">            root_path=root_path</span><br><span class=\"line\">        )</span><br><span class=\"line\">        </span><br><span class=\"line\">\t    ......</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">#: A dictionary of all view functions registered.  The keys will</span></span><br><span class=\"line\">        <span class=\"comment\">#: be function names which are also used to generate URLs and</span></span><br><span class=\"line\">        <span class=\"comment\">#: the values are the function objects themselves.</span></span><br><span class=\"line\">        <span class=\"comment\">#: To register a view function, use the :meth:`route` decorator.</span></span><br><span class=\"line\">        self.view_functions = &#123;&#125;</span><br><span class=\"line\">        <span class=\"comment\">#: A dictionary with lists of functions that will be called at the</span></span><br><span class=\"line\">        <span class=\"comment\">#: beginning of each request. The key of the dictionary is the name of</span></span><br><span class=\"line\">        <span class=\"comment\">#: the blueprint this function is active for, or ``None`` for all</span></span><br><span class=\"line\">        <span class=\"comment\">#: requests. To register a function, use the :meth:`before_request`</span></span><br><span class=\"line\">        <span class=\"comment\">#: decorator.</span></span><br><span class=\"line\">        self.before_request_funcs = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#: A list of functions that will be called at the beginning of the</span></span><br><span class=\"line\">        <span class=\"comment\">#: first request to this instance. To register a function, use the</span></span><br><span class=\"line\">        <span class=\"comment\">#: :meth:`before_first_request` decorator.</span></span><br><span class=\"line\">        <span class=\"comment\">#:</span></span><br><span class=\"line\">        <span class=\"comment\">#: .. versionadded:: 0.8</span></span><br><span class=\"line\">        self.before_first_request_funcs = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#: A dictionary with lists of functions that should be called after</span></span><br><span class=\"line\">        <span class=\"comment\">#: each request.  The key of the dictionary is the name of the blueprint</span></span><br><span class=\"line\">        <span class=\"comment\">#: this function is active for, ``None`` for all requests.  This can for</span></span><br><span class=\"line\">        <span class=\"comment\">#: example be used to close database connections. To register a function</span></span><br><span class=\"line\">        <span class=\"comment\">#: here, use the :meth:`after_request` decorator.</span></span><br><span class=\"line\">        self.after_request_funcs = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#: The :class:`~werkzeug.routing.Map` for this instance.  You can use</span></span><br><span class=\"line\">        <span class=\"comment\">#: this to change the routing converters after the class was created</span></span><br><span class=\"line\">        <span class=\"comment\">#: but before any routes are connected.  Example::</span></span><br><span class=\"line\">        <span class=\"comment\">#:</span></span><br><span class=\"line\">        <span class=\"comment\">#:    from werkzeug.routing import BaseConverter</span></span><br><span class=\"line\">        <span class=\"comment\">#:</span></span><br><span class=\"line\">        <span class=\"comment\">#:    class ListConverter(BaseConverter):</span></span><br><span class=\"line\">        <span class=\"comment\">#:        def to_python(self, value):</span></span><br><span class=\"line\">        <span class=\"comment\">#:            return value.split(',')</span></span><br><span class=\"line\">        <span class=\"comment\">#:        def to_url(self, values):</span></span><br><span class=\"line\">        <span class=\"comment\">#:            return ','.join(super(ListConverter, self).to_url(value)</span></span><br><span class=\"line\">        <span class=\"comment\">#:                            for value in values)</span></span><br><span class=\"line\">        <span class=\"comment\">#:</span></span><br><span class=\"line\">        <span class=\"comment\">#:    app = Flask(__name__)</span></span><br><span class=\"line\">        <span class=\"comment\">#:    app.url_map.converters['list'] = ListConverter</span></span><br><span class=\"line\">        self.url_map = Map()</span><br></pre></td></tr></table></figure>\n<p>实际做的东西还有很多，我只把其中关键的一些拎出来了 。</p>\n<p>我们传入给flask.Flask的<code>__name__</code>作为import_name, 其作用是定义app的默认root_path, 用来为一系列配置资源定位。</p>\n<p>flask.Flask定义了很多东西：</p>\n<ul>\n<li>request_class: 请求类</li>\n<li>response_class: 响应类</li>\n<li>url_rule_class: URL规则类</li>\n<li>self.view_functions: 映射 端点<->视图函数 的字典</-></li>\n<li>self.before_request_funcs: 存放每次请求前要执行的函数</li>\n<li>self.before_first_request_funcs:  存放一系列在app的第一个请求之前需要执行的函数</li>\n<li>self.after_request_funcs: 存放每次请求后要执行的函数</li>\n<li>self.url_map: 规则的映射类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route('/hello/&lt;name&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello &#123;&#125;\"</span>.format(name)</span><br></pre></td></tr></table></figure>\n<p><strong>这一步又做了什么？</strong></p>\n<p>用app.route这个带参数的装饰器来修饰index函数。app.route的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># flask/app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">route</span><span class=\"params\">(self, rule, **options)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"A decorator that is used to register a view function for a</span></span><br><span class=\"line\"><span class=\"string\">        given URL rule.  This does the same thing as :meth:`add_url_rule`</span></span><br><span class=\"line\"><span class=\"string\">        but is intended for decorator usage::</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            @app.route('/')</span></span><br><span class=\"line\"><span class=\"string\">            def index():</span></span><br><span class=\"line\"><span class=\"string\">                return 'Hello World'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        For more information refer to :ref:`url-route-registrations`.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        :param rule: the URL rule as string</span></span><br><span class=\"line\"><span class=\"string\">        :param endpoint: the endpoint for the registered URL rule.  Flask</span></span><br><span class=\"line\"><span class=\"string\">                         itself assumes the name of the view function as</span></span><br><span class=\"line\"><span class=\"string\">                         endpoint</span></span><br><span class=\"line\"><span class=\"string\">        :param options: the options to be forwarded to the underlying</span></span><br><span class=\"line\"><span class=\"string\">                        :class:`~werkzeug.routing.Rule` object.  A change</span></span><br><span class=\"line\"><span class=\"string\">                        to Werkzeug is handling of method options.  methods</span></span><br><span class=\"line\"><span class=\"string\">                        is a list of methods this rule should be limited</span></span><br><span class=\"line\"><span class=\"string\">                        to (``GET``, ``POST`` etc.).  By default a rule</span></span><br><span class=\"line\"><span class=\"string\">                        just listens for ``GET`` (and implicitly ``HEAD``).</span></span><br><span class=\"line\"><span class=\"string\">                        Starting with Flask 0.6, ``OPTIONS`` is implicitly</span></span><br><span class=\"line\"><span class=\"string\">                        added and handled by the standard request handling.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">            endpoint = options.pop(<span class=\"string\">'endpoint'</span>, <span class=\"keyword\">None</span>)</span><br><span class=\"line\">            self.add_url_rule(rule, endpoint, f, **options)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> f</span><br><span class=\"line\">        <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>decorator内调用add_url_rule方法，并原样返回f, 因此路由函数没有任何改变。那么add_url_rule做了什么呢？看看它的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_url_rule</span><span class=\"params\">(self, rule, endpoint=None, view_func=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   provide_automatic_options=None, **options)</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> endpoint <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">          endpoint = _endpoint_from_view_func(view_func)</span><br><span class=\"line\">      options[<span class=\"string\">'endpoint'</span>] = endpoint</span><br><span class=\"line\">      methods = options.pop(<span class=\"string\">'methods'</span>, <span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># if the methods are not given and the view_func object knows its</span></span><br><span class=\"line\">      <span class=\"comment\"># methods we can use that instead.  If neither exists, we go with</span></span><br><span class=\"line\">      <span class=\"comment\"># a tuple of only ``GET`` as default.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> methods <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">          methods = getattr(view_func, <span class=\"string\">'methods'</span>, <span class=\"keyword\">None</span>) <span class=\"keyword\">or</span> (<span class=\"string\">'GET'</span>,)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> isinstance(methods, string_types):</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">'Allowed methods have to be iterables of strings, '</span></span><br><span class=\"line\">                          <span class=\"string\">'for example: @app.route(..., methods=[\"POST\"])'</span>)</span><br><span class=\"line\">      methods = set(item.upper() <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> methods)</span><br><span class=\"line\">......</span><br><span class=\"line\">      rule = self.url_rule_class(rule, methods=methods, **options)</span><br><span class=\"line\">      rule.provide_automatic_options = provide_automatic_options</span><br><span class=\"line\"></span><br><span class=\"line\">      self.url_map.add(rule)</span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> view_func <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">          old_func = self.view_functions.get(endpoint)</span><br><span class=\"line\">          <span class=\"keyword\">if</span> old_func <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> old_func != view_func:</span><br><span class=\"line\">              <span class=\"keyword\">raise</span> AssertionError(<span class=\"string\">'View function mapping is overwriting an '</span></span><br><span class=\"line\">                                   <span class=\"string\">'existing endpoint function: %s'</span> % endpoint)</span><br><span class=\"line\">          self.view_functions[endpoint] = view_func</span><br></pre></td></tr></table></figure>\n<p>先确定<code>endpoint</code>和<code>methods</code>, 然后构建werkzeug/routing.Rule类的实例rule, 并以rule为参数调用<code>self.url_map</code>的add方法，之后就是简单的在<code>self.view_functions</code>字典中以<code>endpoint</code>为键，<code>view_func</code>为值建立映射。关键的地方就这两步了:</p>\n<ul>\n<li>构建werkzeug/routing.Rule类的实例rule</li>\n<li>以rule为参数调用<code>self.url_map</code>的add方法</li>\n</ul>\n<p>werkzeug/routing.Rule的构造函数是这样的:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rule</span><span class=\"params\">(RuleFactory)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, string, defaults=None, subdomain=None, methods=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 build_only=False, endpoint=None, strict_slashes=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 redirect_to=None, alias=False, host=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> string.startswith(<span class=\"string\">'/'</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'urls must start with a leading slash'</span>)</span><br><span class=\"line\">        self.rule = string</span><br><span class=\"line\">        self.is_leaf = <span class=\"keyword\">not</span> string.endswith(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.map = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.strict_slashes = strict_slashes</span><br><span class=\"line\">        self.subdomain = subdomain</span><br><span class=\"line\">        self.host = host</span><br><span class=\"line\">        self.defaults = defaults</span><br><span class=\"line\">        self.build_only = build_only</span><br><span class=\"line\">        self.alias = alias</span><br><span class=\"line\">        <span class=\"keyword\">if</span> methods <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.methods = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(methods, str):</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">'param `methods` should be `Iterable[str]`, not `str`'</span>)</span><br><span class=\"line\">            self.methods = set([x.upper() <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> methods])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'HEAD'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.methods <span class=\"keyword\">and</span> <span class=\"string\">'GET'</span> <span class=\"keyword\">in</span> self.methods:</span><br><span class=\"line\">                self.methods.add(<span class=\"string\">'HEAD'</span>)</span><br><span class=\"line\">        self.endpoint = endpoint</span><br><span class=\"line\">        self.redirect_to = redirect_to</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> defaults:</span><br><span class=\"line\">            self.arguments = set(map(str, defaults))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.arguments = set()</span><br><span class=\"line\">        self._trace = self._converters = self._regex = self._argument_weights = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>依旧是定义了很多属性，着重留意这几个: <code>self.rule</code>, <code>self.endpoint</code>, <code>self._regex</code>.</p>\n<p>而werkzeug/routing.Map的add函数代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, rules=None, default_subdomain=<span class=\"string\">''</span>, charset=<span class=\"string\">'utf-8'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 strict_slashes=True, redirect_defaults=True,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 converters=None, sort_parameters=False, sort_key=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 encoding_errors=<span class=\"string\">'replace'</span>, host_matching=False)</span>:</span></span><br><span class=\"line\">        self._rules = []</span><br><span class=\"line\">        self._rules_by_endpoint = &#123;&#125;</span><br><span class=\"line\">        self._remap = <span class=\"keyword\">True</span></span><br><span class=\"line\">        self._remap_lock = Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.default_subdomain = default_subdomain</span><br><span class=\"line\">        self.charset = charset</span><br><span class=\"line\">        self.encoding_errors = encoding_errors</span><br><span class=\"line\">        self.strict_slashes = strict_slashes</span><br><span class=\"line\">        self.redirect_defaults = redirect_defaults</span><br><span class=\"line\">        self.host_matching = host_matching</span><br><span class=\"line\"></span><br><span class=\"line\">        self.converters = self.default_converters.copy()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> converters:</span><br><span class=\"line\">            self.converters.update(converters)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.sort_parameters = sort_parameters</span><br><span class=\"line\">        self.sort_key = sort_key</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> rulefactory <span class=\"keyword\">in</span> rules <span class=\"keyword\">or</span> ():</span><br><span class=\"line\">            self.add(rulefactory)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, rulefactory)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Add a new rule or factory to the map and bind it.  Requires that the</span></span><br><span class=\"line\"><span class=\"string\">        rule is not bound to another map.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        :param rulefactory: a :class:`Rule` or :class:`RuleFactory`</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> rule <span class=\"keyword\">in</span> rulefactory.get_rules(self):</span><br><span class=\"line\">            rule.bind(self)</span><br><span class=\"line\">            self._rules.append(rule)</span><br><span class=\"line\">            self._rules_by_endpoint.setdefault(rule.endpoint, []).append(rule)</span><br><span class=\"line\">        self._remap = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>add的关键，是rule.bind，而后再添加rule到<code>self._rules</code>和<code>self._rules_by_endpoint</code>这两个属性.</p>\n<p>回到werkzeug/routing.Rule的代码:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rule</span><span class=\"params\">(RuleFactory)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bind</span><span class=\"params\">(self, map, rebind=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Bind the url to a map and create a regular expression based on</span></span><br><span class=\"line\"><span class=\"string\">        the information from the rule itself and the defaults from the map.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        :internal:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.map <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> rebind:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">'url rule %r already bound to map %r'</span> %</span><br><span class=\"line\">                               (self, self.map))</span><br><span class=\"line\">        self.map = map</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.strict_slashes <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.strict_slashes = map.strict_slashes</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.subdomain <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.subdomain = map.default_subdomain</span><br><span class=\"line\">        self.compile()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compile</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Compiles the regular expression and stores it.\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> self.map <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>, <span class=\"string\">'rule not bound'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.map.host_matching:</span><br><span class=\"line\">            domain_rule = self.host <span class=\"keyword\">or</span> <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            domain_rule = self.subdomain <span class=\"keyword\">or</span> <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self._trace = []</span><br><span class=\"line\">        self._converters = &#123;&#125;</span><br><span class=\"line\">        self._static_weights = []</span><br><span class=\"line\">        self._argument_weights = []</span><br><span class=\"line\">        regex_parts = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_build_regex</span><span class=\"params\">(rule)</span>:</span></span><br><span class=\"line\">            index = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> converter, arguments, variable <span class=\"keyword\">in</span> parse_rule(rule):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> converter <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                    regex_parts.append(re.escape(variable))</span><br><span class=\"line\">                    self._trace.append((<span class=\"keyword\">False</span>, variable))</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> part <span class=\"keyword\">in</span> variable.split(<span class=\"string\">'/'</span>):</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> part:</span><br><span class=\"line\">                            self._static_weights.append((index, -len(part)))</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> arguments:</span><br><span class=\"line\">                        c_args, c_kwargs = parse_converter_args(arguments)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        c_args = ()</span><br><span class=\"line\">                        c_kwargs = &#123;&#125;</span><br><span class=\"line\">                    convobj = self.get_converter(</span><br><span class=\"line\">                        variable, converter, c_args, c_kwargs)</span><br><span class=\"line\">                    regex_parts.append(<span class=\"string\">'(?P&lt;%s&gt;%s)'</span> % (variable, convobj.regex))</span><br><span class=\"line\">                    self._converters[variable] = convobj</span><br><span class=\"line\">                    self._trace.append((<span class=\"keyword\">True</span>, variable))</span><br><span class=\"line\">                    self._argument_weights.append(convobj.weight)</span><br><span class=\"line\">                    self.arguments.add(str(variable))</span><br><span class=\"line\">                index = index + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        _build_regex(domain_rule)</span><br><span class=\"line\">        regex_parts.append(<span class=\"string\">'\\\\|'</span>)</span><br><span class=\"line\">        self._trace.append((<span class=\"keyword\">False</span>, <span class=\"string\">'|'</span>))</span><br><span class=\"line\">        _build_regex(self.is_leaf <span class=\"keyword\">and</span> self.rule <span class=\"keyword\">or</span> self.rule.rstrip(<span class=\"string\">'/'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.is_leaf:</span><br><span class=\"line\">            self._trace.append((<span class=\"keyword\">False</span>, <span class=\"string\">'/'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.build_only:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        regex = <span class=\"string\">r'^%s%s$'</span> % (</span><br><span class=\"line\">            <span class=\"string\">u''</span>.join(regex_parts),</span><br><span class=\"line\">            (<span class=\"keyword\">not</span> self.is_leaf <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> self.strict_slashes) <span class=\"keyword\">and</span></span><br><span class=\"line\">            <span class=\"string\">'(?&lt;!/)(?P&lt;__suffix__&gt;/?)'</span> <span class=\"keyword\">or</span> <span class=\"string\">''</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self._regex = re.compile(regex, re.UNICODE)</span><br></pre></td></tr></table></figure>\n<p>可见，URL的模式是以正则表达式来匹配的。’/hello/\\<name>‘ 这个rule对应的正则是：</name></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.compile(<span class=\"string\">'^\\\\|\\\\/hello\\\\/(?P&lt;name&gt;[^/]&#123;1,&#125;)$'</span>)</span><br></pre></td></tr></table></figure>\n<p>这时候的flask/app.Flask <code>self.url_map</code>属性如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;'_rules': [&lt;Rule '/static/&lt;filename&gt;' (HEAD, GET, OPTIONS) -&gt; static&gt;, &lt;Rule '/hello/&lt;name&gt;' (HEAD, GET, OPTIONS) -&gt; index&gt;], '_rules_by_endpoint': &#123;'static': [&lt;Rule '/static/&lt;filename&gt;' (HEAD, GET, OPTIONS) -&gt; static&gt;], 'index': [&lt;Rule '/hello/&lt;name&gt;' (HEAD, GET, OPTIONS) -&gt; index&gt;]&#125;, '_remap': True, '_remap_lock': &lt;unlocked _thread.lock object at 0x7f9c60af1af8&gt;, 'default_subdomain': '', 'charset': 'utf-8', 'encoding_errors': 'replace', 'strict_slashes': True, 'redirect_defaults': True, 'host_matching': False, 'converters': &#123;'default': &lt;class 'werkzeug.routing.UnicodeConverter'&gt;, 'string': &lt;class 'werkzeug.routing.UnicodeConverter'&gt;, 'any': &lt;class 'werkzeug.routing.AnyConverter'&gt;, 'path': &lt;class 'werkzeug.routing.PathConverter'&gt;, 'int': &lt;class 'werkzeug.routing.IntegerConverter'&gt;, 'float': &lt;class 'werkzeug.routing.FloatConverter'&gt;, 'uuid': &lt;class 'werkzeug.routing.UUIDConverter'&gt;&#125;, 'sort_parameters': False, 'sort_key': None&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，urlpattern -&gt; endpoint -&gt; view_func的链条就建立好了，收到请求后就是按照这个链条去找到对应的视图函数进行处理进而给出响应的。</p>\n<p><strong>现在可以开始分析请求的处理过程了</strong></p>\n<p>根据WSGI规范，应用必须是一个可调用对象，接受服务器传入的environ和start_response两个参数，我们看一下flask.app.Flask的代码:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, environ, start_response)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"The WSGI server calls the Flask application object as the</span></span><br><span class=\"line\"><span class=\"string\">    WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class=\"line\"><span class=\"string\">    wrapped to applying middleware.\"\"\"</span></span><br><span class=\"line\">    response = self.wsgi_app(environ, start_response)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<p>Flask类实现了__call__这个方法, 并且把实际的处理转移到了wsgi_app方法中，继续刨:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wsgi_app</span><span class=\"params\">(self, environ, start_response)</span>:</span></span><br><span class=\"line\">    ctx = self.request_context(environ)</span><br><span class=\"line\">    error = <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            ctx.push()</span><br><span class=\"line\">            response = self.full_dispatch_request()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            error = e</span><br><span class=\"line\">            response = self.handle_exception(e)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            error = sys.exc_info()[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">raise</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response(environ, start_response)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.should_ignore_error(error):</span><br><span class=\"line\">            error = <span class=\"keyword\">None</span></span><br><span class=\"line\">        ctx.auto_pop(error)</span><br></pre></td></tr></table></figure>\n<p>主要是这几步:</p>\n<ul>\n<li>ctx = self.request_context(environ) – 解析请求上下文</li>\n<li>ctx.push() – 将请求上下文推入栈中</li>\n<li>response = self.full_dispatch_request() – 分派处理并得到响应</li>\n<li>return response(environ, start_response) – 响应发送给服务器</li>\n</ul>\n<p>其他的异常处理就不说了。</p>\n<p>逐一来分析以上4个步骤:</p>\n<h5 id=\"解析请求上下文\"><a href=\"#解析请求上下文\" class=\"headerlink\" title=\"解析请求上下文\"></a>解析请求上下文</h5><p>先启动服务器:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn -w 1 -b 0.0.0.0:8000 analyze_flask:app</span><br></pre></td></tr></table></figure>\n<p>请求<a href=\"http://0.0.0.0:8000/hello/flask\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:8000/hello/flask</a> ，打印出environ变量:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;'wsgi.errors': &lt;gunicorn.http.wsgi.WSGIErrorsWrapper object at 0x7f11a2eea908&gt;, 'wsgi.version': (1, 0), 'wsgi.multithread': False, 'wsgi.multiprocess': False, 'wsgi.run_once': False, 'wsgi.file_wrapper': &lt;class 'gunicorn.http.wsgi.FileWrapper'&gt;, 'SERVER_SOFTWARE': 'gunicorn/19.9.0', 'wsgi.input': &lt;gunicorn.http.body.Body object at 0x7f11a2eea710&gt;, 'gunicorn.socket': &lt;socket.socket fd=9, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 8000), raddr=('127.0.0.1', 60080)&gt;, 'REQUEST_METHOD': 'GET', 'QUERY_STRING': '', 'RAW_URI': '/hello/flask', 'SERVER_PROTOCOL': 'HTTP/1.1', 'HTTP_HOST': '0.0.0.0:8000', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_CACHE_CONTROL': 'max-age=0', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1', 'HTTP_USER_AGENT': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/70.0.3538.77 Chrome/70.0.3538.77 Safari/537.36', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate', 'HTTP_ACCEPT_LANGUAGE': 'en-US,en;q=0.9,zh-CN;q=0.8,zh-TW;q=0.7,zh;q=0.6', 'wsgi.url_scheme': 'http', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '60080', 'SERVER_NAME': '0.0.0.0', 'SERVER_PORT': '8000', 'PATH_INFO': '/hello/flask', 'SCRIPT_NAME': ''&#125;</span><br></pre></td></tr></table></figure>\n<p>这个是很重要的哈，因为解析请求上下文要用到的参数就是environ:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># flask/app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request_context</span><span class=\"params\">(self, environ)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Create a :class:`~flask.ctx.RequestContext` representing a</span></span><br><span class=\"line\"><span class=\"string\">        WSGI environment. Use a ``with`` block to push the context,</span></span><br><span class=\"line\"><span class=\"string\">        which will make :data:`request` point at this request.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        See :doc:`/reqcontext`.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Typically you should not call this from your own code. A request</span></span><br><span class=\"line\"><span class=\"string\">        context is automatically pushed by the :meth:`wsgi_app` when</span></span><br><span class=\"line\"><span class=\"string\">        handling a request. Use :meth:`test_request_context` to create</span></span><br><span class=\"line\"><span class=\"string\">        an environment and context instead of this method.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        :param environ: a WSGI environment</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> RequestContext(self, environ)</span><br></pre></td></tr></table></figure>\n<p>所以,  ctx = self.request_context(environ)中的ctx变量其实就是flask/ctx.RequestContext这个类的实例, 类的构造函数如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># flask/ctx.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestContext</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, app, environ, request=None)</span>:</span></span><br><span class=\"line\">        self.app = app</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            request = app.request_class(environ)</span><br><span class=\"line\">        self.request = request</span><br><span class=\"line\">        self.url_adapter = app.create_url_adapter(self.request)</span><br><span class=\"line\">        self.match_request()</span><br><span class=\"line\">\t\t......</span><br></pre></td></tr></table></figure>\n<p>a)先是用environ去构造flask/wrappers.Request的实例: request</p>\n<p>b)接着要求出url调制器: url_adapter</p>\n<p>c)最后是匹配请求，看命中的是哪一个urlpattern</p>\n<p>a没什么好讲的，看下b这步:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># flask/app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_url_adapter</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Creates a URL adapter for the given request. The URL adapter</span></span><br><span class=\"line\"><span class=\"string\">        is created at a point where the request context is not yet set</span></span><br><span class=\"line\"><span class=\"string\">        up so the request is passed explicitly.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        .. versionadded:: 0.6</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        .. versionchanged:: 0.9</span></span><br><span class=\"line\"><span class=\"string\">           This can now also be called without a request object when the</span></span><br><span class=\"line\"><span class=\"string\">           URL adapter is created for the application context.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        .. versionchanged:: 1.0</span></span><br><span class=\"line\"><span class=\"string\">            :data:`SERVER_NAME` no longer implicitly enables subdomain</span></span><br><span class=\"line\"><span class=\"string\">            matching. Use :attr:`subdomain_matching` instead.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> request <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># If subdomain matching is disabled (the default), use the</span></span><br><span class=\"line\">            <span class=\"comment\"># default subdomain in all cases. This should be the default</span></span><br><span class=\"line\">            <span class=\"comment\"># in Werkzeug but it currently does not have that feature.</span></span><br><span class=\"line\">            subdomain = ((self.url_map.default_subdomain <span class=\"keyword\">or</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.subdomain_matching <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.url_map.bind_to_environ(</span><br><span class=\"line\">                request.environ,</span><br><span class=\"line\">                server_name=self.config[<span class=\"string\">'SERVER_NAME'</span>],</span><br><span class=\"line\">                subdomain=subdomain)</span><br><span class=\"line\">        <span class=\"comment\"># We need at the very least the server name to be set for this</span></span><br><span class=\"line\">        <span class=\"comment\"># to work.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.config[<span class=\"string\">'SERVER_NAME'</span>] <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.url_map.bind(</span><br><span class=\"line\">                self.config[<span class=\"string\">'SERVER_NAME'</span>],</span><br><span class=\"line\">                script_name=self.config[<span class=\"string\">'APPLICATION_ROOT'</span>],</span><br><span class=\"line\">                url_scheme=self.config[<span class=\"string\">'PREFERRED_URL_SCHEME'</span>])</span><br></pre></td></tr></table></figure>\n<p>因为我们的request不是None， 所以走的是这一步:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> self.url_map.bind_to_environ(</span><br><span class=\"line\">                request.environ,</span><br><span class=\"line\">                server_name=self.config[<span class=\"string\">'SERVER_NAME'</span>],</span><br><span class=\"line\">                subdomain=subdomain)</span><br></pre></td></tr></table></figure>\n<p>又要看werkzeug/routing.Map的代码了:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Map</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bind_to_environ</span><span class=\"params\">(self, environ, server_name=None, subdomain=None)</span>:</span></span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Map.bind(self, server_name, script_name,</span><br><span class=\"line\">                        subdomain, environ[<span class=\"string\">'wsgi.url_scheme'</span>],</span><br><span class=\"line\">                        environ[<span class=\"string\">'REQUEST_METHOD'</span>], path_info,</span><br><span class=\"line\">                        query_args=query_args)</span><br><span class=\"line\">                       </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bind</span><span class=\"params\">(self, server_name, script_name=None, subdomain=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             url_scheme=<span class=\"string\">'http'</span>, default_method=<span class=\"string\">'GET'</span>, path_info=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             query_args=None)</span>:</span></span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MapAdapter(self, server_name, script_name, subdomain,</span><br><span class=\"line\">                          url_scheme, path_info, default_method, query_args)</span><br></pre></td></tr></table></figure>\n<p>看来最终b这一步得到的是MapAdapter这个类的实例，其构造函数如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapAdapter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Returned by :meth:`Map.bind` or :meth:`Map.bind_to_environ` and does</span></span><br><span class=\"line\"><span class=\"string\">    the URL matching and building based on runtime information.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, map, server_name, script_name, subdomain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 url_scheme, path_info, default_method, query_args=None)</span>:</span></span><br><span class=\"line\">        self.map = map</span><br><span class=\"line\">        self.server_name = to_unicode(server_name)</span><br><span class=\"line\">        script_name = to_unicode(script_name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> script_name.endswith(<span class=\"string\">u'/'</span>):</span><br><span class=\"line\">            script_name += <span class=\"string\">u'/'</span></span><br><span class=\"line\">        self.script_name = script_name</span><br><span class=\"line\">        self.subdomain = to_unicode(subdomain)</span><br><span class=\"line\">        self.url_scheme = to_unicode(url_scheme)</span><br><span class=\"line\">        self.path_info = to_unicode(path_info)</span><br><span class=\"line\">        self.default_method = to_unicode(default_method)</span><br><span class=\"line\">        self.query_args = query_args</span><br></pre></td></tr></table></figure>\n<p>轮到c这一步了，match_request:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestContext</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match_request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Can be overridden by a subclass to hook into the matching</span></span><br><span class=\"line\"><span class=\"string\">        of the request.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            url_rule, self.request.view_args = \\</span><br><span class=\"line\">                self.url_adapter.match(return_rule=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">            self.request.url_rule = url_rule</span><br><span class=\"line\">        <span class=\"keyword\">except</span> HTTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            self.request.routing_exception = e</span><br></pre></td></tr></table></figure>\n<p>要调用self.url_adapter的match方法进行匹配，并指定返回rule(关键字参数return_rule=True):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapAdapter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">(self, path_info=None, method=None, return_rule=False,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              query_args=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> path_info <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            path_info = self.path_info</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            path_info = to_unicode(path_info, self.map.charset)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> query_args <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            query_args = self.query_args</span><br><span class=\"line\">        method = (method <span class=\"keyword\">or</span> self.default_method).upper()</span><br><span class=\"line\"></span><br><span class=\"line\">        path = <span class=\"string\">u'%s|%s'</span> % (</span><br><span class=\"line\">            self.map.host_matching <span class=\"keyword\">and</span> self.server_name <span class=\"keyword\">or</span> self.subdomain,</span><br><span class=\"line\">            path_info <span class=\"keyword\">and</span> <span class=\"string\">'/%s'</span> % path_info.lstrip(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">for</span> rule <span class=\"keyword\">in</span> self.map._rules:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                rv = rule.match(path, method)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> RequestSlash:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> RequestRedirect(self.make_redirect_url(</span><br><span class=\"line\">                    url_quote(path_info, self.map.charset,</span><br><span class=\"line\">                              safe=<span class=\"string\">'/:|+'</span>) + <span class=\"string\">'/'</span>, query_args))</span><br><span class=\"line\">            <span class=\"keyword\">except</span> RequestAliasRedirect <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> RequestRedirect(self.make_alias_redirect_url(</span><br><span class=\"line\">                    path, rule.endpoint, e.matched_values, method, query_args))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rv <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            ......</span><br><span class=\"line\">            <span class=\"keyword\">if</span> return_rule:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> rule, rv</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> rule.endpoint, rv</span><br></pre></td></tr></table></figure>\n<p>核心是构建path，遍历Map中每一个rule, 调用rule.match方法进行匹配。</p>\n<p>又要回到werkzeug/routing.Rule了:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rule</span><span class=\"params\">(RuleFactory)</span>:</span></span><br><span class=\"line\">\t......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span><span class=\"params\">(self, path, method=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.build_only:</span><br><span class=\"line\">            m = self._regex.search(path)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                groups = m.groupdict()</span><br><span class=\"line\">                result = &#123;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> iteritems(groups):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        value = self._converters[name].to_python(value)</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> ValidationError:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span></span><br><span class=\"line\">                    result[str(name)] = value</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>在Rule.match中，用rule._regex去匹配path, 如果匹配到，则返回请求参数这个字典，否则返回None.<br>回忆一下我们构建的map._rules有哪些:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;'_rules': [&lt;Rule '/static/&lt;filename&gt;' (HEAD, GET, OPTIONS) -&gt; static&gt;, &lt;Rule '/hello/&lt;name&gt;' (HEAD, GET, OPTIONS) -&gt; index&gt;, &lt;Rule '/hi' (HEAD, GET, OPTIONS) -&gt; hi&gt;]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在MapAdapter中，如果匹配到就直接<code>return rule, rv</code>, 否则就尝试匹配下一个rule.<br>ok, 步骤c终于完了。<br>现在，我们知道请求命中的是哪一个rule, 请求的参数是什么了。看一下ctx的属性吧:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ctx.request.__dict__</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;'environ': &#123;'wsgi.errors': &lt;gunicorn.http.wsgi.WSGIErrorsWrapper object at 0x7f52c6bc0ac8&gt;, 'wsgi.version': (1, 0), 'wsgi.multithread': False, 'wsgi.multiprocess': False, 'wsgi.run_once': False, 'wsgi.file_wrapper': &lt;class 'gunicorn.http.wsgi.FileWrapper'&gt;, 'SERVER_SOFTWARE': 'gunicorn/19.9.0', 'wsgi.input': &lt;gunicorn.http.body.Body object at 0x7f52c6bc08d0&gt;, 'gunicorn.socket': &lt;socket.socket fd=9, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 8000), raddr=('127.0.0.1', 60598)&gt;, 'REQUEST_METHOD': 'GET', 'QUERY_STRING': '', 'RAW_URI': '///hello/flask', 'SERVER_PROTOCOL': 'HTTP/1.1', 'HTTP_HOST': '0.0.0.0:8000', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_CACHE_CONTROL': 'max-age=0', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1', 'HTTP_USER_AGENT': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/70.0.3538.77 Chrome/70.0.3538.77 Safari/537.36', 'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate', 'HTTP_ACCEPT_LANGUAGE': 'en-US,en;q=0.9,zh-CN;q=0.8,zh-TW;q=0.7,zh;q=0.6', 'wsgi.url_scheme': 'http', 'REMOTE_ADDR': '127.0.0.1', 'REMOTE_PORT': '60598', 'SERVER_NAME': '0.0.0.0', 'SERVER_PORT': '8000', 'PATH_INFO': '///hello/flask', 'SCRIPT_NAME': '', 'werkzeug.request': &lt;Request 'http://0.0.0.0:8000/hello/flask' [GET]&gt;&#125;, 'shallow': False, 'view_args': &#123;'name': 'flask'&#125;, 'url_rule': &lt;Rule '/hello/&lt;name&gt;' (GET, OPTIONS, HEAD) -&gt; index&gt;, 'url': 'http://0.0.0.0:8000/hello/flask'&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;'view_args': &#123;'name': 'flask'&#125;, 'url_rule': &lt;Rule '/hello/&lt;name&gt;' (GET, OPTIONS, HEAD) -&gt; index&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是请求要访问的rule和请求的参数。</p>\n<h5 id=\"将请求上下文推入栈中\"><a href=\"#将请求上下文推入栈中\" class=\"headerlink\" title=\"将请求上下文推入栈中\"></a>将请求上下文推入栈中</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestContext</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        top = _request_ctx_stack.top</span><br><span class=\"line\">        <span class=\"keyword\">if</span> top <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span> <span class=\"keyword\">and</span> top.preserved:</span><br><span class=\"line\">            top.pop(top._preserved_exc)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Before we push the request context we have to ensure that there</span></span><br><span class=\"line\">        <span class=\"comment\"># is an application context.</span></span><br><span class=\"line\">        app_ctx = _app_ctx_stack.top</span><br><span class=\"line\">        <span class=\"keyword\">if</span> app_ctx <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> app_ctx.app != self.app:</span><br><span class=\"line\">            app_ctx = self.app.app_context()</span><br><span class=\"line\">            app_ctx.push()</span><br><span class=\"line\">            self._implicit_app_ctx_stack.append(app_ctx)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._implicit_app_ctx_stack.append(<span class=\"keyword\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> hasattr(sys, <span class=\"string\">'exc_clear'</span>):</span><br><span class=\"line\">            sys.exc_clear()</span><br><span class=\"line\"></span><br><span class=\"line\">        _request_ctx_stack.push(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.session <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            session_interface = self.app.session_interface</span><br><span class=\"line\">            self.session = session_interface.open_session(</span><br><span class=\"line\">                self.app, self.request</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.session <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                self.session = session_interface.make_null_session(self.app)</span><br></pre></td></tr></table></figure>\n<p>ctx被推入<code>_request_ctx_stack</code>中。</p>\n<h5 id=\"分派处理并得到响应\"><a href=\"#分派处理并得到响应\" class=\"headerlink\" title=\"分派处理并得到响应\"></a>分派处理并得到响应</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flask</span><span class=\"params\">(_PackageBoundObject)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">full_dispatch_request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Dispatches the request and on top of that performs request</span></span><br><span class=\"line\"><span class=\"string\">        pre and postprocessing as well as HTTP exception catching and</span></span><br><span class=\"line\"><span class=\"string\">        error handling.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        .. versionadded:: 0.7</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.try_trigger_before_first_request_functions()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            request_started.send(self)</span><br><span class=\"line\">            rv = self.preprocess_request()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rv <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                rv = self.dispatch_request()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            rv = self.handle_user_exception(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.finalize_request(rv)</span><br></pre></td></tr></table></figure>\n<p>先是调用preprocess_request函数，执行所有要求在请求处理前要完成的函数，如果这一步有返回值的话，那么就不会调用dispatch_request来真正的处理请求了，否则就接着调用dispatch_request函数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispatch_request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    req = _request_ctx_stack.top.request</span><br><span class=\"line\">    <span class=\"keyword\">if</span> req.routing_exception <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        self.raise_routing_exception(req)</span><br><span class=\"line\">    rule = req.url_rule</span><br><span class=\"line\">    <span class=\"comment\"># if we provide automatic options for this URL and the</span></span><br><span class=\"line\">    <span class=\"comment\"># request came with the OPTIONS method, reply automatically</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> getattr(rule, <span class=\"string\">'provide_automatic_options'</span>, <span class=\"keyword\">False</span>) \\</span><br><span class=\"line\">       <span class=\"keyword\">and</span> req.method == <span class=\"string\">'OPTIONS'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.make_default_options_response()</span><br><span class=\"line\">    <span class=\"comment\"># otherwise dispatch to the handler for that endpoint</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.view_functions[rule.endpoint](**req.view_args)</span><br></pre></td></tr></table></figure>\n<p>从_request_ctx_stack找出我们刚刚压入的ctx对象的request属性，并据此找出请求的rule和rule.endpoint, 接下来就简单了，根据rule.endpoint从view_functions中找到对应的路由函数，并以view_args作为参数来调用，返回结果再由finalize_request处理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finalize_request</span><span class=\"params\">(self, rv, from_error_handler=False)</span>:</span></span><br><span class=\"line\">    response = self.make_response(rv)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        response = self.process_response(response)</span><br><span class=\"line\">        request_finished.send(self, response=response)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> from_error_handler:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span></span><br><span class=\"line\">        self.logger.exception(<span class=\"string\">'Request finalizing failed with an '</span></span><br><span class=\"line\">                              <span class=\"string\">'error while handling an error'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<p>finalize_request的作用就是将视图函数的返回值转换成Response的实例对象, 并调用后处理函数对response进行处理。</p>\n<h5 id=\"响应发送给服务器\"><a href=\"#响应发送给服务器\" class=\"headerlink\" title=\"响应发送给服务器\"></a>响应发送给服务器</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># werkzeug/wrappers.BaseResponse</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_wsgi_response</span><span class=\"params\">(self, environ)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Returns the final WSGI response as tuple.  The first item in</span></span><br><span class=\"line\"><span class=\"string\">        the tuple is the application iterator, the second the status and</span></span><br><span class=\"line\"><span class=\"string\">        the third the list of headers.  The response returned is created</span></span><br><span class=\"line\"><span class=\"string\">        specially for the given environment.  For example if the request</span></span><br><span class=\"line\"><span class=\"string\">        method in the WSGI environment is ``'HEAD'`` the response will</span></span><br><span class=\"line\"><span class=\"string\">        be empty and only the headers and status code will be present.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        .. versionadded:: 0.6</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        :param environ: the WSGI environment of the request.</span></span><br><span class=\"line\"><span class=\"string\">        :return: an ``(app_iter, status, headers)`` tuple.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        headers = self.get_wsgi_headers(environ)</span><br><span class=\"line\">        app_iter = self.get_app_iter(environ)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> app_iter, self.status, headers.to_wsgi_list()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, environ, start_response)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Process this response as WSGI application.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        :param environ: the WSGI environment.</span></span><br><span class=\"line\"><span class=\"string\">        :param start_response: the response callable provided by the WSGI</span></span><br><span class=\"line\"><span class=\"string\">                               server.</span></span><br><span class=\"line\"><span class=\"string\">        :return: an application iterator</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        app_iter, status, headers = self.get_wsgi_response(environ)</span><br><span class=\"line\">        start_response(status, headers)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> app_iter</span><br></pre></td></tr></table></figure>\n<p>典型的WSGI调用方式.</p>\n<p>至此，一个请求就处理完了。</p>\n<p>撒花~</p>\n","text":"一直对Flask的实现机制很好奇，本着知其然更要知其所以然的态度，我将基于一个简单的HTTP请求来分析分析Flask的源码，看看是如何从请求变成响应的。Flask是基于WSGI协议实现的Python Web开发框架，我不会介绍什么是WSGI协议，请看: https://www.p","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Flask","slug":"Flask","count":1,"path":"api/tags/Flask.json"}]},{"title":"beginner to Django 6","slug":"beginner-to-Django-6","date":"2018-11-22T14:55:46.000Z","updated":"2018-11-23T17:55:25.110Z","comments":true,"path":"api/articles/beginner-to-Django-6.json","excerpt":"","keywords":null,"cover":null,"content":"<p>接下来要讲的是定制Django自动生成的管理端页面。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    fields = [<span class=\"string\">'pub_date'</span>, <span class=\"string\">'question_text'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>\n<p>继承ModelAdmin得到的类作为第二个位置参数传入register函数，可以对Question在管理端的表征做出改变。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    fieldsets = [</span><br><span class=\"line\">        (<span class=\"keyword\">None</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'question_text'</span>, ]&#125;),</span><br><span class=\"line\">        (<span class=\"string\">'Date information'</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'pub_date'</span>, ]&#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>\n<p>通过定义fieldsets, 可以将字段进行分块呈现，对于字段非常多的model尤其有用。</p>\n<p>似乎忘了什么？我们还需要能够编辑Choice啊！</p>\n<p>简单的做法是参照Question进行注册：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    fieldsets = [</span><br><span class=\"line\">        (<span class=\"keyword\">None</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'question_text'</span>, ]&#125;),</span><br><span class=\"line\">        (<span class=\"string\">'Date information'</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'pub_date'</span>, ]&#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Question, QuestionAdmin)</span><br><span class=\"line\">admin.site.register(Choice)</span><br></pre></td></tr></table></figure>\n<p>这样做固然可以，但是用起来就会发现很不方便，最好是能够在新建question的时候能够一并创建一批choices。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChoiceInline</span><span class=\"params\">(admin.StackedInline)</span>:</span></span><br><span class=\"line\">    model = Choice</span><br><span class=\"line\">    extra = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    fieldsets = [</span><br><span class=\"line\">        (<span class=\"keyword\">None</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'question_text'</span>, ]&#125;),</span><br><span class=\"line\">        (<span class=\"string\">'Date information'</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'pub_date'</span>, ]&#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    inlines = [ChoiceInline]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>\n<p>这样的话，Django就知道Choice model 是在 Question model页面一并编辑的，并且总会提供3个空值供填写。</p>\n<p>由于StackedInline过长，将其更改为TabularInline以更好地展示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChoiceInline</span><span class=\"params\">(admin.TabularInline)</span>:</span></span><br><span class=\"line\">    model = Choice</span><br><span class=\"line\">    extra = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>OK, Choice的编辑定制到此为止，让我们去修改默认的Question展示页：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    fieldsets = [</span><br><span class=\"line\">        (<span class=\"keyword\">None</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'question_text'</span>, ]&#125;),</span><br><span class=\"line\">        (<span class=\"string\">'Date information'</span>, &#123;<span class=\"string\">'fields'</span>:[<span class=\"string\">'pub_date'</span>, ]&#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    list_display = (<span class=\"string\">'question_text'</span>, <span class=\"string\">'pub_date'</span>, <span class=\"string\">'was_published_recently'</span>)</span><br></pre></td></tr></table></figure>\n<p>通过定义list_display变量，指定页面需要展示的内容。而且，还可以通过点击头部进行排序。</p>\n<p>不过有个小问题，was_published_recently 展示的是函数名， 而且还不能排序。通过在Question model中增加几个属性来解决该问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/models.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils <span class=\"keyword\">import</span> timezone</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Question</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    question_text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    pub_date = models.DateTimeField(<span class=\"string\">'date published'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.question_text</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">was_published_recently</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.pub_date &gt; timezone.now() - timedelta(days=<span class=\"number\">1</span>)</span><br><span class=\"line\">    was_published_recently.admin_order_field = <span class=\"string\">'pub_date'</span></span><br><span class=\"line\">    was_published_recently.boolean = <span class=\"keyword\">True</span></span><br><span class=\"line\">    was_published_recently.short_description = <span class=\"string\">'Published recently?'</span></span><br></pre></td></tr></table></figure>\n<p>在QuestionAdmin中增加list_filter变量，就可以通过pub_date来筛选了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">list_filter = [<span class=\"string\">'pub_date'</span>]</span><br></pre></td></tr></table></figure>\n<p>而search_fields变量则可以指定能用来进行搜索的字段：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">search_fields = [<span class=\"string\">'question_text'</span>]</span><br></pre></td></tr></table></figure>\n<p>页面左上角的标题是”Django administration”, 如何改为自己想要的东西呢？很简单，一个变量搞掂：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/admin.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">admin.AdminSite.site_header = <span class=\"string\">'Polls Administration'</span></span><br></pre></td></tr></table></figure>\n<p>当然，这样只是改了polls这一个app的标题，其他app还是”Django administration”，如果想要整个项目都一起更改，就要多做几步了：</p>\n<ol>\n<li><p>在manage.py所处目录下创建目录templates, 在templates中再创建目录admin;</p>\n</li>\n<li><p>修改settings.py的TEMPLATES变量，增加DIRS：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class=\"line\">        <span class=\"string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"string\">'templates'</span>)],</span><br><span class=\"line\">        <span class=\"string\">'APP_DIRS'</span>: <span class=\"keyword\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">'OPTIONS'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'context_processors'</span>: [</span><br><span class=\"line\">                <span class=\"string\">'django.template.context_processors.debug'</span>,</span><br><span class=\"line\">                <span class=\"string\">'django.template.context_processors.request'</span>,</span><br><span class=\"line\">                <span class=\"string\">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class=\"line\">                <span class=\"string\">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将django/contrib/admin/templates/admin/base_site.html复制到第一步创建的admin目录中；</p>\n</li>\n<li><p>修改base_site.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block branding %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"site-name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'admin:index' %&#125;\"</span>&gt;</span>Polls administration<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","text":"接下来要讲的是定制Django自动生成的管理端页面。1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>from django.contrib import admin<br>from .models import Question, Choice<b","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 5","slug":"beginner-to-Django-5","date":"2018-11-21T00:17:00.000Z","updated":"2018-11-22T14:49:09.114Z","comments":true,"path":"api/articles/beginner-to-Django-5.json","excerpt":"","keywords":null,"cover":null,"content":"<p>接下来要介绍静态文件的使用：添加CSS和背景图片。</p>\n<p><code>django.contrib.staticfiles</code>这个应用（在INSTALLED_APPS中）从每个应用中搜集静态文件并放到同一个位置以用于生产环境。Django的<code>STATICFILES_FINDERS</code>设置包含一系列用来搜寻静态文件的工具，其中默认的是AppDirectoriesFinder, 其会在每个应用中寻找叫做static的子目录。因此，在polls目录下建立一个子目录static, 出于名称空间的考虑，在其中再建立一个polls子目录，而后在子目录中创建文件style.css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* polls/static/polls/style.css */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着将样式加到polls/templates/polls/index.htm中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load static %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static  'polls/style.css' %&#125;\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动服务，访问<a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a>  可以看到最新效果。</p>\n<p>“% static %” 用于生成静态文件的绝对路经。</p>\n<p>而后在polls/statis/polls中再建立一个子目录：images, 在其中放入一张图片:background.gif, 而后更新样式:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white <span class=\"built_in\">url</span>(<span class=\"string\">'images/background.gif'</span>) no-repeat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动服务，访问<a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a> ，可以看到背景图片展示在左上角。</p>\n","text":"接下来要介绍静态文件的使用：添加CSS和背景图片。django.contrib.staticfiles这个应用（在INSTALLED_APPS中）从每个应用中搜集静态文件并放到同一个位置以用于生产环境。Django的STATICFILES_FINDERS设置包含一系列用来搜寻静态","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 4","slug":"beginner-to-Django-4","date":"2018-11-19T05:16:28.000Z","updated":"2018-11-20T15:20:52.982Z","comments":true,"path":"api/articles/beginner-to-Django-4.json","excerpt":"","keywords":null,"cover":null,"content":"<p>接下来是处理表单请求，以及怎么样用更少的代码去实现视图。</p>\n<p>改写<code>polls/detail.html</code>, 加上表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if error_message %&#125;<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"&#123;% url 'polls:vote' question.id %&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">&#123;% csrf_token %&#125;</span><br><span class=\"line\">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"choice\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; choice.id &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Vote\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>表单的意思就不解释了，懂点HTML就能看得懂。</p>\n<p>“csrf_token”的作用是防止跨站伪造请求攻击。</p>\n<p>以上表单数据通过POST方式发送到polls:vote这个url, 接着把对应的视图函数实现了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404, HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        selected_choice = question.choice_set.get(pk=request.POST[<span class=\"string\">'choice'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'question'</span>: question,</span><br><span class=\"line\">            <span class=\"string\">'error_message'</span>: <span class=\"string\">\"You didn't select a choice!\"</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        selected_choice.votes += <span class=\"number\">1</span></span><br><span class=\"line\">        selected_choice.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponseRedirect(reverse(<span class=\"string\">'polls:results'</span>, args=(question.id, )))</span><br></pre></td></tr></table></figure>\n<p>通过从request.POST中找到表单传递进来的choiceID, 来找到selected_choice, 并将投票数增1. 要注意的一个地方是，处理完POST请求后一定要重定向到其他页面，防止用户反复提交表单。</p>\n<p>reverse函数的作用是构建url。</p>\n<p>由于要重定向到polls:results, 因此这里也要修改：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404, HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">result</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/results.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p>相应的polls/results.html如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'polls:detail' question.id %&#125;\"</span>&gt;</span>Vote again?<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>观察polls/views.py，可以发现index, detail, result这3个视图函数非常相似：根据url中的参数，从数据库中查询出相应结果，渲染模板得到响应。由于这种操作实在是太常见，Django提供了generic views(一般视图)这种方法来减少代码量。</p>\n<p>首先修改视图：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404, HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.views <span class=\"keyword\">import</span> generic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexView</span><span class=\"params\">(generic.ListView)</span>:</span></span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/index.html'</span></span><br><span class=\"line\">    context_object_name = <span class=\"string\">'latest_question_list'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/detail.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultsView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">    model = Question</span><br><span class=\"line\">    template_name = <span class=\"string\">'polls/results.html'</span></span><br></pre></td></tr></table></figure>\n<p>然后修改<code>polls/urls.py</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">app_name = <span class=\"string\">'polls'</span></span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.IndexView.as_view(), name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:pk&gt;/'</span>, views.DetailView.as_view(), name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:pk&gt;/results/'</span>, views.ResultsView.as_view(), name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><code>ListView</code>和<code>DetailView</code>分别查找“符合条件的对象组成的列表”和“符合条件的特定对象”。</p>\n<p><code>DetailView</code>根据url中pk参数的值去数据库中查找，所以把url中question_id替换成pk.</p>\n<p><code>DetailView</code>默认查找的模板格式为：&lt;app_name&gt;/&lt;model_name&gt;_detail.html, 因为把我们想要用的模板传递给<code>template_name</code>参数来告诉Django用指定的模板。</p>\n<p><code>DetailView</code>默认用model名字来做上下文对象的名字，而<code>ListView</code>默认的上下文对象名字是:&lt;modelname_list&gt;, 即 question_list, 这显然和模板不符，因此定义context_object_name变量来改写这一问题。</p>\n<p>说实话，我个人觉得这个generiv views并没有什么特别的优势吸引我使用。反而把简单的事情搞复杂了。见仁见智吧。</p>\n","text":"接下来是处理表单请求，以及怎么样用更少的代码去实现视图。改写polls/detail.html, 加上表单：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>&lt;h1&gt;&#123;&#123; ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 3","slug":"beginner-to-Django-3","date":"2018-11-16T10:25:38.000Z","updated":"2018-11-16T12:08:19.506Z","comments":true,"path":"api/articles/beginner-to-Django-3.json","excerpt":"","keywords":null,"cover":null,"content":"<p>接下来进入视图部分。</p>\n<p>在<code>polls/views.py</code>中创建几个view funcs:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'Hello Django!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'You are looking at question %s'</span> % question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">result</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'You are looking at the result of question %s'</span> % question_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'You are voting on question %s'</span> % question_id)</span><br></pre></td></tr></table></figure>\n<p>然后在<code>polls/urls.py</code>中构建url到view func的映射：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/results/'</span>, views.result, name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>然后分别访问<a href=\"http://localhost:8000/polls/1/，\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/1/，</a> <a href=\"http://localhost:8000/polls/1/results/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/1/results/</a>, <a href=\"http://localhost:8000/polls/1/vote/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/1/vote/</a>  就可以看到对应结果了。</p>\n<p>由于我们在<code>settings.py</code>中设置了<code>ROOT_URLCONF = &#39;myproj.urls&#39;</code>， 因此请求会首先找到<code>myproj/urls.py</code>,  在那里匹配到polls规则后，去掉这部分，转到<code>polls/urls.py</code>中来匹配，遍历<code>urlpatterns</code>中每一个path, 找到第一个匹配的path指定的view， 将request和对应参数传入，得到响应。所以path的顺序很重要。</p>\n<p>OK，流程上应该没问题了，让我们加上模板系统，上点真材实料！</p>\n<p>首先，在polls目录下创建一个子目录templates。这是因为settings.py中设置TEMPLATES的backend为DjangoTemplates， 同时其APP_DIRS也设为True，而DjangoTemplates会在每一个INSTALLED_APPS的目录下寻找templates的子目录。</p>\n<p>然后在templates下再创建一个polls的子目录。在其中新建index.html文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if latest_question_list %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    &#123;% for question in latest_question_list %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/polls/&#123;&#123; question.id &#125;&#125;/\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% else %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>No polls are available.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>修改视图函数index:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> loader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    template = loader.get_template(<span class=\"string\">'polls/index.html'</span>)</span><br><span class=\"line\">    context = &#123;</span><br><span class=\"line\">        <span class=\"string\">'latest_question_list'</span>: latest_question_list,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure>\n<p>去<a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a> 就可以看到最近创建的5个问题了。</p>\n<p>记不记得Flask渲染模板用的是render函数？没错，Django也有…</p>\n<p>改写后的index, 方便多了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    latest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">    context = &#123;</span><br><span class=\"line\">        <span class=\"string\">'latest_question_list'</span>: latest_question_list,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure>\n<p>如果请求的资源不存在，需要返回404异常的话：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, Http404</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        question = Question.objects.get(pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Question.DoesNotExist:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Http404(<span class=\"string\">'Question donot exist.'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p>或者更快捷一点：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render, get_object_or_404</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">    question = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n<p>回到index视图，前面hardcode了一个地方：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/polls/&#123;&#123; question.id &#125;&#125;/\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样很不好，一旦url规则要改，全部都要改，有一个类似于Flask的url_for的方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'detail' question.id %&#125;\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>能这么做的前提，是我们之前在配置url映射的时候，在path函数中设置了name 关键字参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path(<span class=\"string\">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class=\"string\">'detail'</span>)</span><br></pre></td></tr></table></figure>\n<p>这样就不用担心url格式发生变化了。</p>\n<p>但是实际生产环境的项目可能会有很多的apps，可能其他app中也有一个detail的视图，那怎么区分呢？</p>\n<p>办法很简单，namespace–名称空间。</p>\n<p>添加应用的名称空间：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">app_name = <span class=\"string\">'polls'</span></span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/results/'</span>, views.result, name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">    path(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>修改链接：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'polls:detail' question.id %&#125;\"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动服务，一切OK.</p>\n","text":"接下来进入视图部分。在polls/views.py中创建几个view funcs:1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 2","slug":"beginner-to-Django-2","date":"2018-11-16T07:01:41.000Z","updated":"2018-11-16T08:49:49.139Z","comments":true,"path":"api/articles/beginner-to-Django-2.json","excerpt":"","keywords":null,"cover":null,"content":"<p>今天要涉及的部分是数据库和模型，以及Django自带的admin管理端。</p>\n<p>Django支持很多常见的数据库，我这里选择用MySQL。要能让Django与MySQL交互，Django官方推荐安装mysqlclient–直接pip安装即可。数据库配置在<code>myproj/settings.py</code>中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Database</span></span><br><span class=\"line\"><span class=\"comment\"># https://docs.djangoproject.com/en/2.1/ref/settings/#databases</span></span><br><span class=\"line\"></span><br><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'db_django'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">'3306'</span>,</span><br><span class=\"line\">        <span class=\"string\">'OPTIONS'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'init_command'</span>: <span class=\"string\">\"SET sql_mode='STRICT_TRANS_TABLES'\"</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要事先在MySQL中创建一个叫db_django的库，创建用户test,密码test,并授予其对应权限</span></span><br><span class=\"line\"><span class=\"comment\"># 此外，Django强烈要求打开MySQL的strict-mode,我查了一下，这个确实很好用，会把很多</span></span><br><span class=\"line\"><span class=\"comment\"># 错误的请求从原来仅仅给出warning调为直接error报错，安全级别更高了</span></span><br></pre></td></tr></table></figure>\n<p>顺便把时区改成自己的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># settings.py</span></span><br><span class=\"line\"></span><br><span class=\"line\">TIME_ZONE = <span class=\"string\">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure>\n<p>注意到<code>myproj/settings.py</code>中这样一个变量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Application definition</span></span><br><span class=\"line\"></span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这些是Django默认自带的应用，因为这些基本上所有场景都会用到。如果不需要的话可以注释掉。由于以上apps中有些需要库表，所以执行以下命令进行迁移：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py migrate</span><br></pre></td></tr></table></figure>\n<p>然后就可以在db_django库中看到已经有对应的tables了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql test@localhost:db_django&gt; SHOW tables;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| Tables_in_db_django        |</span><br><span class=\"line\">|----------------------------|</span><br><span class=\"line\">| auth_group                 |</span><br><span class=\"line\">| auth_group_permissions     |</span><br><span class=\"line\">| auth_permission            |</span><br><span class=\"line\">| auth_user                  |</span><br><span class=\"line\">| auth_user_groups           |</span><br><span class=\"line\">| auth_user_user_permissions |</span><br><span class=\"line\">| django_admin_log           |</span><br><span class=\"line\">| django_content_type        |</span><br><span class=\"line\">| django_migrations          |</span><br><span class=\"line\">| django_session             |</span><br><span class=\"line\">+----------------------------+</span><br></pre></td></tr></table></figure>\n<p>migrate命令的作用是根据模型进行数据库同步，它只会同步<code>INSTALLED_APPS</code>中的应用涉及到的库表。</p>\n<p>现在开始创建模型。模型差不多可以认为是数据库的表，只不过能做的事情多得多。这里需要创建两个models: Question 和 Choice. 编辑 <code>polls/models.py</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Question</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    question_text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    pub_date = models.DateTimeField(<span class=\"string\">'date published'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Choice</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class=\"line\">    choice_text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    votes = models.IntegerField(default=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>接下来要让models生效。首先在settings.py中添加我们的polls应用，这样迁移的时候才会执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"string\">'polls.app.PollsConfig'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>然后执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py makemigrations polls</span><br><span class=\"line\">Migrations for 'polls':</span><br><span class=\"line\">  polls/migrations/0001_initial.py</span><br><span class=\"line\">    - Create model Choice</span><br><span class=\"line\">    - Create model Question</span><br><span class=\"line\">    - Add field question to choice</span><br></pre></td></tr></table></figure>\n<p>makemigrations命令的作用是告诉Django我对models做了一些改变，需要存到migration中去。可以在<code>polls/migrations/0001_initial.py</code>查看对应内容。这个文件是可以改动的，达到手动控制Django迁移结果的目的。现在执行迁移并修改库表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py migrate</span><br><span class=\"line\">Operations to perform:</span><br><span class=\"line\">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class=\"line\">Running migrations:</span><br><span class=\"line\">  Applying polls.0001_initial... OK</span><br></pre></td></tr></table></figure>\n<p>在MySQL中可以看到创建了两张表：polls_choice,  polls_question.</p>\n<p>使用迁移最大的好处是可以不用手动去修改库表，尤其是线上环境，可以在不影响现有业务的前提下更新库表。</p>\n<p>下面看看Django自带的admin管理端。</p>\n<p>首先创建管理员用户：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n<p>按提示输入用户名，邮箱和密码即可。</p>\n<p>然后在polls/admin.py中注册model - Question，告诉admin其可以在页面上被修改。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question, Choice</span><br><span class=\"line\"><span class=\"comment\"># Register your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Question)</span><br></pre></td></tr></table></figure>\n<p>启动服务后，在<a href=\"http://localhost:8000/admin/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/admin/</a> 页面可以看到Question已经可以编辑了。真的是太方便了！</p>\n","text":"今天要涉及的部分是数据库和模型，以及Django自带的admin管理端。Django支持很多常见的数据库，我这里选择用MySQL。要能让Django与MySQL交互，Django官方推荐安装mysqlclient–直接pip安装即可。数据库配置在myproj/settings.p","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"beginner to Django 1","slug":"beginner-to-Django-1","date":"2018-11-08T15:56:23.000Z","updated":"2018-11-23T18:08:55.917Z","comments":true,"path":"api/articles/beginner-to-Django-1.json","excerpt":"","keywords":null,"cover":null,"content":"<p>最近在学习Django的使用，把相关的知识点记录下来，毕竟只有经历了比输出更残酷的输入，才算是真正掌握对应的知识点。<br>Django和Flask是Python Web开发框架中使用最多的两个框架，两者最大的不同之处在于，Flask只提供一个强健的内核，而Django则尽可能把所有的工具都集成在自身中，即Battery-included.这样做的好处在于，你无须去互联网上找别人开发的扩展，毕竟扩展开发人员的水平无法保证，出了问题也不一定能得到解决，在Django这里，有一个出色的团队在开发和维护，一切都可控。Django的另一个优点是，规定了包的组织架构，特别适合一个团队一起开发项目时使用，而Flask则很考验开发人员自身的代码架构水平了，遇到水平参差不齐的同事的话，可能会比较痛苦。</p>\n<p>OK，开始跟着Django官网的tutorial学习Django！</p>\n<p>首先创建一个项目project:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ django-admin startproject myproj</span><br></pre></td></tr></table></figure>\n<p>会看到当前目录下多了一个myproj的目录，结构如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) /tmp ❯ tree myproj </span><br><span class=\"line\">myproj</span><br><span class=\"line\">├── manage.py</span><br><span class=\"line\">└── myproj</span><br><span class=\"line\">    ├── __init__.py</span><br><span class=\"line\">    ├── settings.py</span><br><span class=\"line\">    ├── urls.py</span><br><span class=\"line\">    └── wsgi.py</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 5 files</span><br></pre></td></tr></table></figure>\n<p><code>manage.py</code>是一个管理入口，所能做的事情其实和命令 <code>django-admin</code> 是一样的，但<code>manage.py</code>额外为我们做了这几件事：</p>\n<ul>\n<li>将项目的包路经加到<code>sys.path</code>中</li>\n<li>设置环境变量<code>DJANGO_SETTINGS_MODULE</code>，使其指向项目的<code>settings.py</code></li>\n</ul>\n<p>一般来说，单个项目开发的时候使用<code>manage.py</code>会更容易，而如果要在多个项目中跳转，则应使用<code>django-admin</code>.</p>\n<p>里层的myproj目录则是实际的项目包。</p>\n<p><code>myproj/settings.py</code>中放置的是myproj项目的设置，<code>myproj/urls.py</code>是项目的url分配器，<code>myproj/wsgi.py</code>是WSGI服务器运行web_app的入口。</p>\n<p>先启动试一下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p>就可以在<a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/</a>  看到默认页面了。</p>\n<p>需要指出的是，这里启动用的是Django内置的方便开发而设置的服务器，不能用于生产环境。</p>\n<p>现在创建一个投票应用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py startapp polls</span><br></pre></td></tr></table></figure>\n<p>app 是一个项目中具体做事情的部分，项目中可以含有多个app， app也可以置于多个项目中。</p>\n<p>app可以位于任何pythonpath内的路经，这里放在<code>manage.py</code>同一级只是为了导入方便。</p>\n<p>看一下polls的内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ tree polls </span><br><span class=\"line\">polls</span><br><span class=\"line\">├── admin.py</span><br><span class=\"line\">├── apps.py</span><br><span class=\"line\">├── __init__.py</span><br><span class=\"line\">├── migrations</span><br><span class=\"line\">│   └── __init__.py</span><br><span class=\"line\">├── models.py</span><br><span class=\"line\">├── tests.py</span><br><span class=\"line\">└── views.py</span><br></pre></td></tr></table></figure>\n<p><code>startapp</code> 命令自动帮我们生成以上文件，节省了开发人员设计的时间。是不是很方便？</p>\n<p>现在创建一个真正的视图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'Hello Django!'</span>)</span><br></pre></td></tr></table></figure>\n<p>要想访问到index视图函数，需要有url映射到这里来，在<code>polls/views.py</code>同级目录下创建<code>urls.py</code>模块，并写入如下内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>path函数的第一个参数是route, 第二个参数是view func, 关键字参数name是为了便于动态构建url用的。</p>\n<p>这样就可以了吗？当然不行，还在把<code>polls/urls.py</code>注册到<code>myproj/urls.py</code>中才行，因为myproj才是入口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># myproj/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"myproj URL Configuration</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The `urlpatterns` list routes URLs to views. For more information please see:</span></span><br><span class=\"line\"><span class=\"string\">    https://docs.djangoproject.com/en/2.1/topics/http/urls/</span></span><br><span class=\"line\"><span class=\"string\">Examples:</span></span><br><span class=\"line\"><span class=\"string\">Function views</span></span><br><span class=\"line\"><span class=\"string\">    1. Add an import:  from my_app import views</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('', views.home, name='home')</span></span><br><span class=\"line\"><span class=\"string\">Class-based views</span></span><br><span class=\"line\"><span class=\"string\">    1. Add an import:  from other_app.views import Home</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')</span></span><br><span class=\"line\"><span class=\"string\">Including another URLconf</span></span><br><span class=\"line\"><span class=\"string\">    1. Import the include() function: from django.urls import include, path</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path, include</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'polls/'</span>, include(<span class=\"string\">'polls.urls'</span>)),</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    </span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># 上面介绍了3种添加路由的方法，Django推荐用 include， 只有一个例外: admin.</span></span><br><span class=\"line\"><span class=\"comment\"># include函数会把匹配到的url截掉开头匹配的模式后传递给引入的url模块，这样的话</span></span><br><span class=\"line\"><span class=\"comment\"># 前面匹配的模块就不会写死，可以根据需求任意调整成比如 'polls2/', 'fun-polls/'，</span></span><br><span class=\"line\"><span class=\"comment\"># 视图函数完全不用任何改变。</span></span><br></pre></td></tr></table></figure>\n<p>启动server,然后就可以在 <a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a>  看到响应内容”Hello Django!”.</p>\n","text":"最近在学习Django的使用，把相关的知识点记录下来，毕竟只有经历了比输出更残酷的输入，才算是真正掌握对应的知识点。<br>Django和Flask是Python Web开发框架中使用最多的两个框架，两者最大的不同之处在于，Flask只提供一个强健的内核，而Django则尽可能把","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":6,"path":"api/tags/Django.json"}]},{"title":"正则表达式-扩展符号","slug":"正则表达式-扩展符号","date":"2018-05-07T15:20:54.000Z","updated":"2018-05-08T16:27:24.000Z","comments":true,"path":"api/articles/正则表达式-扩展符号.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br><strong>(?iLmsux)</strong><br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">42</span>]: re.findall(<span class=\"string\">r\"(?i)yes\"</span>, <span class=\"string\">\"yes, Yes, YES\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">42</span>]: [<span class=\"string\">'yes'</span>, <span class=\"string\">'Yes'</span>, <span class=\"string\">'YES'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“m”表示把多行作为各个独立体而不是一个整体来判断，因此用^匹配的时候，两行都会命中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">49</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">49</span>]: <span class=\"string\">'the first line,\\nthis is second line'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">50</span>]: re.findall(<span class=\"string\">r\"^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">50</span>]: [<span class=\"string\">'the'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">51</span>]: re.findall(<span class=\"string\">r\"(?m)^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">51</span>]: [<span class=\"string\">'the'</span>, <span class=\"string\">'this'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“s”表示.可以匹配包括换行符在内的所有字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">60</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: re.search(<span class=\"string\">r\"the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: <span class=\"string\">'the first'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">62</span>]: re.search(<span class=\"string\">r\"(?s)the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">62</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br></pre></td></tr></table></figure></p>\n<p>“x”允许对匹配模式换行，加上注释等，使之更易读。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">70</span>]: phonenumber</span><br><span class=\"line\">Out[<span class=\"number\">70</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: re.match(<span class=\"string\">r'''(?x)</span></span><br><span class=\"line\"><span class=\"string\">...:          \\((\\d&#123;3&#125;)\\) #区号</span></span><br><span class=\"line\"><span class=\"string\">...:          \\s+         #空白</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;3&#125;       #前缀</span></span><br><span class=\"line\"><span class=\"string\">...:          -           #横线</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;4&#125;       #尾号</span></span><br><span class=\"line\"><span class=\"string\">...:          '''</span>, phonenumber).group()</span><br><span class=\"line\">Out[<span class=\"number\">71</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>(?:…) </strong>可以对部分正则表达式分组，但是并不会保存该分组用于后续的检查或者应用<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">3</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"string\">'http://google.com http://www.google.com http://code.google.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: re.findall(<span class=\"string\">r\"http://(\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: [(<span class=\"string\">''</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'www.'</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'code.'</span>, <span class=\"string\">'google.com'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">5</span>]: re.findall(<span class=\"string\">r\"http://(?:\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">5</span>]: [<span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>(?P<name>)</name></strong>通过名称来保存匹配到的分组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">11</span>]: re.search(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"2018-5-8\"</span>).groupdict()</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: &#123;<span class=\"string\">'year'</span>: <span class=\"string\">'2018'</span>, <span class=\"string\">'month'</span>: <span class=\"string\">'5'</span>, <span class=\"string\">'day'</span>: <span class=\"string\">'8'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: re.sub(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"\\g&lt;month&gt;-\\g&lt;day&gt;-\\g&lt;year&gt;\"</span>,<span class=\"string\">\"2018-5-8\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">12</span>]: <span class=\"string\">'5-8-2018'</span></span><br></pre></td></tr></table></figure></p>\n<p>在sub函数中可以通过”\\g&lt;year>“表示匹配到的分组year，而不用\\num来表示。<br><br><br><strong>(?=…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">13</span>]: re.findall(<span class=\"string\">r\"\\w+ (?=van Rossum)\"</span>, <span class=\"string\">\"Guido van Rossum, Just van Rossum, Kay Ring\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: [<span class=\"string\">'Guido '</span>, <span class=\"string\">'Just '</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\w+ (?=van Rossum)\"</span>模式，表示只有后接<span class=\"string\">\"van Rossum\"</span>的<span class=\"string\">\"\\w+ \"</span>才匹配。</span><br></pre></td></tr></table></figure></p>\n<p><br><br><strong>(?!…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">22</span>]: re.findall(<span class=\"string\">r\"Emma (?!test)\"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">22</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">23</span>]: re.findall(<span class=\"string\">r\"Emma \"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">23</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"><span class=\"string\">\"Emma (?!test)\"</span>模式 ，表示只有后面不是接<span class=\"string\">\"test\"</span>的<span class=\"string\">\"Emma \"</span>才会匹配。</span><br></pre></td></tr></table></figure></p>\n","text":"Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br>(?iLmsux)<br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br>1<br>2<br>In [42]: re.findall(","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Python","slug":"Python","count":8,"path":"api/tags/Python.json"}]},{"title":"简单总结一下近期学习的shell脚本编程","slug":"简单总结一下近期学习的shell脚本编程","date":"2018-05-01T06:58:47.000Z","updated":"2018-05-01T11:29:07.000Z","comments":true,"path":"api/articles/简单总结一下近期学习的shell脚本编程.json","excerpt":"","keywords":null,"cover":null,"content":"<p>花了点时间把《The Linux command line》这本书最后部分看完了—shell脚本编程，总结于此，加深印象。</p>\n<p>脚本第一行需要告诉操作系统用什么解释器来执行我们的脚本，即shebang:<br><code>#!/bin/bash</code><br>定义变量，”=”两边不能有空格，使用变量需要加上前缀”$”来展开:<br><code><br>    foo=emma<br>    echo $foo<br></code></p>\n<p>shell函数,定义语法有两种：<br><code><br>    a)function name {<br>    commands<br>    return<br>    }<br>    b)name () {<br>    commands<br>    return<br>    }<br></code><br>函数的定义必须在使用之前，因此最好在脚本开头把函数全部定义好。<br>局部变量：<br><code><br>    foo=0<br>    func1 () {<br>        local foo<br>        foo=1<br>        echo “func1:foo = $foo”<br>    }<br>    func2 () {<br>        local foo<br>        foo=2<br>        echo “func2:foo = $foo”<br>    }<br>    echo “global: foo = $foo”<br>    func1<br>    echo “global: foo = $foo”<br>    func2<br>    echo “global: foo = $foo”<br></code><br>运行结果：<br><code><br>    jo@Arch  ~  hello.sh<br>    global: foo = 0<br>    func1:foo = 1<br>    global: foo = 0<br>    func2:foo = 2<br>    global: foo = 0<br></code><br>可见，在函数内通过local命令可以定义局部变量，局部变量仅对其所在的函数起作用。<br>Shell Functions In Your .bashrc File<br>shell函数完美的替代了别名，并且实际上是创建个人所用的小命令的首选方法。别名非常局限于命令的种类和它们支持的shell功能，然而 shell函数允许任何可以编写脚本的东西。例如，如果我们喜欢为我们的脚本开发的这个 report_disk_space shell 函数，我们可以为我们的.bashrc 文件 创建一个相似的名为 ds 的函数：<br><code><br>    ds () {<br>        echo “Disk Space Utilization For $HOSTNAME”<br>        df -h<br>    }<br></code><br>分支选择</p>\n<p>分支选择有两种方法，if..else 和 case，分别介绍：<br><i>if..else</i><br>语法形式：<br><code><br>    if [condition];then<br>        commands<br>    elif [contidion];then<br>        commands<br>    else<br>        commands<br>    fi<br></code><br><i>case..esac</i><br>语法形式：<br><code><br>    case word in<br>        pattern1)  commands;;<br>        pattern2)  commands;;<br>    esac<br></code></p>\n<p>Test 命令</p>\n<p>文件表达式</p>\n<p><br>    表达式                       如果下列条件为真则返回True<br>    file1 -ef file2             file1和file2拥有相同的索引号（通过硬连接两个文件指向相同的文件<br>    file1 -nt file2                file1新于file2<br>    file1 -ot file2                file1早于filt2<br>    -b file                        file存在并且是一个块（设备）文件<br>    -c file                        file存在奶并且是一个字符（设备）文件<br>    -d file                        file存在且为目录<br>    -e file                        file存在<br>    -f file                     file存在且是一个普通文件<br>    -g file                        file存在且设置了组ID<br>    -G file                     file存在且由有效组ID拥有<br>    -L file                     file存在且是一个符号链接<br>    -p file                     file存在且是一个命名管道<br>    -r file                     file存在且可读<br>    -s file                     file存在且其长度大于零<br>    -S file                     file存在且是一个网络socket<br>    -w file                     file存在且可写<br>    -x file                     file存在且可执行<br></p>\n\n<p>字符串表达式</p>\n<p><br>    表达式                       如果下列条件为真则返回True<br>    string                       string不为null<br>    -n string                    字符串string的长度大于零<br>    -z string             字符串string的长度为零<br>    string1 == string2         两个字符串相等，此处用单等号也可以，不过推荐==<br>    string1 != string2         两个字符串不等<br>    string1 &gt; string2         string1排列在string2之后<br>    string1 &lt; string2         string1排列在string2之前<br></p>\n\n<p>整型表达式 </p>\n<p><br>    表达式                       如果为真<br>    int1 -eq int2                相等<br>    int1 -ne int2             不等<br>    int1 -lt int2             int1小于int2<br>    int1 -le int2             int1小于等于int2<br>    int1 -gt int2                 int1大于int2<br>    int1 -ge int2             int1大于等于int2<br></p>\n\n<p>Compound Command 复合命令<br><code>[[ expression ]]</code><br>支持test所有表达式 ，但是增加了正则匹配：<br><code>string1 =~ pattern</code><br>因此能用这种就尽量用这种。</p>\n<p>(())–为整数设计<br>专门用于执行整数之间的操作，变量可以不用展开，直接使用名字</p>\n<p>逻辑操作符</p>\n<p>操作符            测试        [[]] and (())<br>AND            -a            &amp;&amp;<br>OR            -o            ||<br>NOT            !            !</p>\n<p>控制操作符：分支的另一种方法<br>很酷的用法，也可以进行防卫性编程。<br>cmd1 &amp;&amp; cmd2先执行cmd1，并且只有cmd1执行成功才会执行cmd2<br>cmd1 || cmd2先执行cmd1，只有cmd1执行失败才会执行cmd2</p>\n<p>读取键盘输入<br>使用read命令读取键盘输入，语法：<br>    read [-options] [variables…]<br>如果没提供变量名，shell变量REPLY会包含所有数据行。<br>IFS<br>通常shell对输入按空格，tab，换行符进行切分，可以通过更改IFS对输入进行分离：<br>        IFS=”:”  read value1 value1 &lt;&lt;&lt; “$info”<br><i>You can’t Pipe read, 你不能把管道用你在read上</i></p>\n<p>循环控制<br>循环有三种方式：<br><i>while</i><br>语法：<br><code><br>    while condition;do<br>        commands<br>    done<br></code><br><i>until</i><br>语法：<br><code><br>    until contidion;do<br>        commands<br>    done<br></code><br>while 和 until两者的区别：<br>while在contidion成立时循环，直到不成立时退出；until相反。<br><i>for</i><br>for循环有两种：<br>1.<br><code><br>    for i in a b c d;do<br>        echo $i<br>    done<br></code><br>2.<br><code><br>    for ((i=0; i&lt;5; ++i));do<br>        echo $i<br>    done<br></code><br>跳出循环的命令break和continue，和Python机理相同。</p>\n<p>位置参数</p>\n<p>$0表示脚本完整名字，$1,$2等等表示用来表示位置参数。<br>shift命令可以向后移动一次$1的指向，原来的$2变成$1,对于多个输入参数的处理很有用。</p>\n<p>数组<br>创建数组的方式：<br>1.<br><code><br>    arr[1]=”foo”<br>    arr[2]=”bar”<br></code></p>\n<p>2.<br><code>arr=(“foo” “bar”)</code></p>\n<p>简单的shell脚本没啥问题了，更复杂的还要实际生产中去历练。不过目前工作中shell基本用不到太高深的东西，所以这些基本上也够了，主要精力要用来熟悉并掌握linux环境下的开发，部署，维护上。新买了一本《Linux Shell脚本攻略》，好好研读。而这本《The Linux Command Line》的网页版，刚好可以利用地铁上的时间来重温复习一遍。</p>\n","text":"花了点时间把《The Linux command line》这本书最后部分看完了—shell脚本编程，总结于此，加深印象。脚本第一行需要告诉操作系统用什么解释器来执行我们的脚本，即shebang:<br>#!/bin/bash<br>定义变量，”=”两边不能有空格，使用变量需要加","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}]},{"title":"Introduction to tcpdump","slug":"Introduction-to-tcpdump","date":"2018-04-29T09:08:22.000Z","updated":"2018-04-29T10:10:58.000Z","comments":true,"path":"api/articles/Introduction-to-tcpdump.json","excerpt":"","keywords":null,"cover":null,"content":"<p>网络编程出异常的时候，常用的调试办法一定包含抓包。抓取请求和响应的内容，才能定位问题出在哪里。<br>这几天学习了一下tcpdump命令，不得不说，简直是抓包神器啊。下面开始正文。</p>\n<p>man手册中介绍tcpdump：dump traffic on a network.顾名思义，就是抓取网络中信息流。</p>\n<p>我经常用的选项：<br>-A: 以ASCII形式打印抓到的每一个包，但是如果加密了就没办法<br>-c: 后面接数字，抓到指定数量包后就退出<br>-i: 指定监听的网络接口。一般用”-i any”表示监听所有网络接口的数据<br>-nn: 不要把主机地址和端口转换成名字，即保留数字形式<br>-r: 读取文件<br>-s: 限定包的长度，”-s 0”表示抓取完整长度的包<br>-tttt: 打印人类可读的时间<br>-vvv: 使包的信息尽可能详细<br>-w: 把抓到的包写入文件中<br>-X: 以16进制和ASCII的形式输出</p>\n<p>还可以指定主机，端口，网络：<br>host: 指定主机<br>port: 指定端口<br>net: 指定网络<br>src: 包来源<br>dst: 包目的地</p>\n<p>还可以用逻辑表达式组合一系列选项：<br>“and” “or” “not”</p>\n<p>tcpdump一般的输出形式：<br>  src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len</p>\n<p>以我目前的水平只能解释到这里了，man手册后半部分比较深入，由于自己对TCP的原理还不够了解，看不太明白…<br>以上基本的用法掌握了，对于工作中遇到的大部分问题其实也够用了。后续有时间再好好研读HTTP权威指南等大部头，彻底搞懂网络请求的每一个细节！</p>\n","text":"网络编程出异常的时候，常用的调试办法一定包含抓包。抓取请求和响应的内容，才能定位问题出在哪里。<br>这几天学习了一下tcpdump命令，不得不说，简直是抓包神器啊。下面开始正文。man手册中介绍tcpdump：dump traffic on a network.顾名思义，就是抓","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"}]}]}