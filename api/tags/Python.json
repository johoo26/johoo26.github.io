{"name":"Python","slug":"Python","count":2,"postlist":[{"title":"beginner to Django","slug":"beginner-to-Django-1","date":"2018-11-08T15:56:23.000Z","updated":"2018-11-15T08:48:11.438Z","comments":true,"path":"api/articles/beginner-to-Django-1.json","excerpt":"","keywords":null,"cover":null,"content":"<p>最近在学习Django的使用，把相关的知识点记录下来，毕竟只有经历了比输出更残酷的输入，才算是真正掌握对应的知识点。<br>Django和Flask是Python Web开发框架中使用最多的两个框架，两者最大的不同之处在于，Flask只提供一个强健的内核，而Django则尽可能把所有的工具都集成在自身中，即Battery-included.这样做的好处在于，你无须去互联网上找别人开发的扩展，毕竟扩展开发人员的水平无法保证，出了问题也不一定能得到解决，在Django这里，有一个出色的团队在开发和维护，一切都可控。Django的另一个优点是，规定了包的组织架构，特别适合一个团队一起开发项目时使用，而Flask则很考验开发人员自身的代码架构水平了，遇到水平参差不齐的同事的话，可能会比较痛苦。</p>\n<p>OK，开始跟着Django官网的tutorial学习Django！</p>\n<p>首先创建一个项目project:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ django-admin startproject myproj</span><br></pre></td></tr></table></figure>\n<p>会看到当前目录下多了一个myproj的目录，结构如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) /tmp ❯ tree myproj </span><br><span class=\"line\">myproj</span><br><span class=\"line\">├── manage.py</span><br><span class=\"line\">└── myproj</span><br><span class=\"line\">    ├── __init__.py</span><br><span class=\"line\">    ├── settings.py</span><br><span class=\"line\">    ├── urls.py</span><br><span class=\"line\">    └── wsgi.py</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 5 files</span><br></pre></td></tr></table></figure>\n<p><code>manage.py</code>是一个管理入口，所能做的事情其实和命令 <code>django-admin</code> 是一样的，但<code>manage.py</code>额外为我们做了这几件事：</p>\n<ul>\n<li>将项目的包路经加到<code>sys.path</code>中</li>\n<li>设置环境变量<code>DJANGO_SETTINGS_MODULE</code>，使其指向项目的<code>settings.py</code></li>\n</ul>\n<p>一般来说，单个项目开发的时候使用<code>manage.py</code>会更容易，而如果要在多个项目中跳转，则应使用<code>django-admin</code>.</p>\n<p>里层的myproj目录则是实际的项目包。</p>\n<p><code>myproj/settings.py</code>中放置的是myproj项目的设置，<code>myproj/urls.py</code>是项目的url分配器，<code>myproj/wsgi.py</code>是WSGI服务器运行web_app的入口。</p>\n<p>先启动试一下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py runserver</span><br></pre></td></tr></table></figure>\n<p>就可以在<a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/</a>  看到默认页面了。</p>\n<p>需要指出的是，这里启动用的是Django内置的方便开发而设置的服务器，不能用于生产环境。</p>\n<p>现在创建一个投票应用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ python manage.py startapp polls</span><br></pre></td></tr></table></figure>\n<p>app 是一个项目中具体做事情的部分，项目中可以含有多个app， app也可以置于多个项目中。</p>\n<p>app可以位于任何pythonpath内的路经，这里放在<code>manage.py</code>同一级只是为了导入方便。</p>\n<p>看一下polls的内容：</p>\n<p>看一下polls的内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) myproj ❯ tree polls </span><br><span class=\"line\">polls</span><br><span class=\"line\">├── admin.py</span><br><span class=\"line\">├── apps.py</span><br><span class=\"line\">├── __init__.py</span><br><span class=\"line\">├── migrations</span><br><span class=\"line\">│   └── __init__.py</span><br><span class=\"line\">├── models.py</span><br><span class=\"line\">├── tests.py</span><br><span class=\"line\">└── views.py</span><br></pre></td></tr></table></figure>\n<p><code>startapp</code> 命令自动帮我们生成以上文件，节省了开发人员设计的时间。是不是很方便？</p>\n<p>现在创建一个真正的视图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls.views.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">'Hello Django!'</span>)</span><br></pre></td></tr></table></figure>\n<p>要想访问到index视图函数，需要有url映射到这里来，在<code>polls.views.py</code>同级目录下创建<code>urls.py</code>模块，并写入如下内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls.urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>path函数的第一个参数是route, 第二个参数是view func, 关键字参数name是为了便于动态构建url用的。</p>\n<p>这样就可以了吗？当然不行，还在把<code>polls.urls.py</code>注册到<code>myproj.urls.py</code>中才行，因为myproj才是入口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># myproj/urls.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"myproj URL Configuration</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The `urlpatterns` list routes URLs to views. For more information please see:</span></span><br><span class=\"line\"><span class=\"string\">    https://docs.djangoproject.com/en/2.1/topics/http/urls/</span></span><br><span class=\"line\"><span class=\"string\">Examples:</span></span><br><span class=\"line\"><span class=\"string\">Function views</span></span><br><span class=\"line\"><span class=\"string\">    1. Add an import:  from my_app import views</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('', views.home, name='home')</span></span><br><span class=\"line\"><span class=\"string\">Class-based views</span></span><br><span class=\"line\"><span class=\"string\">    1. Add an import:  from other_app.views import Home</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')</span></span><br><span class=\"line\"><span class=\"string\">Including another URLconf</span></span><br><span class=\"line\"><span class=\"string\">    1. Import the include() function: from django.urls import include, path</span></span><br><span class=\"line\"><span class=\"string\">    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path, include</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'polls/'</span>, include(<span class=\"string\">'polls.urls'</span>)),</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin.site.urls),</span><br><span class=\"line\">    </span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># 上面介绍了3种添加路由的方法，Django推荐用 include， 只有一个例外: admin.</span></span><br><span class=\"line\"><span class=\"comment\"># include函数会把匹配到的url截掉开头匹配的模式后传递给引入的url模块，这样的话</span></span><br><span class=\"line\"><span class=\"comment\"># 前面匹配的模块就不会写死，可以根据需求任意调整成比如 'polls2/', 'fun-polls/'，</span></span><br><span class=\"line\"><span class=\"comment\"># 视图函数完全不用任何改变。</span></span><br></pre></td></tr></table></figure>\n<p>启动server,然后就可以在 <a href=\"http://localhost:8000/polls/\" target=\"_blank\" rel=\"noopener\">http://localhost:8000/polls/</a>  看到响应内容”Hello Django!”.</p>\n","text":"最近在学习Django的使用，把相关的知识点记录下来，毕竟只有经历了比输出更残酷的输入，才算是真正掌握对应的知识点。<br>Django和Flask是Python Web开发框架中使用最多的两个框架，两者最大的不同之处在于，Flask只提供一个强健的内核，而Django则尽可能把","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":2,"path":"api/tags/Python.json"},{"name":"Django","slug":"Django","count":1,"path":"api/tags/Django.json"}]},{"title":"正则表达式-扩展符号","slug":"正则表达式-扩展符号","date":"2018-05-07T15:20:54.000Z","updated":"2018-05-08T16:27:24.000Z","comments":true,"path":"api/articles/正则表达式-扩展符号.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br><strong>(?iLmsux)</strong><br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">42</span>]: re.findall(<span class=\"string\">r\"(?i)yes\"</span>, <span class=\"string\">\"yes, Yes, YES\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">42</span>]: [<span class=\"string\">'yes'</span>, <span class=\"string\">'Yes'</span>, <span class=\"string\">'YES'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“m”表示把多行作为各个独立体而不是一个整体来判断，因此用^匹配的时候，两行都会命中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">49</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">49</span>]: <span class=\"string\">'the first line,\\nthis is second line'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">50</span>]: re.findall(<span class=\"string\">r\"^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">50</span>]: [<span class=\"string\">'the'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">51</span>]: re.findall(<span class=\"string\">r\"(?m)^th\\w+\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">51</span>]: [<span class=\"string\">'the'</span>, <span class=\"string\">'this'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>“s”表示.可以匹配包括换行符在内的所有字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">60</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: re.search(<span class=\"string\">r\"the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: <span class=\"string\">'the first'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">62</span>]: re.search(<span class=\"string\">r\"(?s)the.*\"</span>, s).group()</span><br><span class=\"line\">Out[<span class=\"number\">62</span>]: <span class=\"string\">'the first\\nthe second\\nthe third'</span></span><br></pre></td></tr></table></figure></p>\n<p>“x”允许对匹配模式换行，加上注释等，使之更易读。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">70</span>]: phonenumber</span><br><span class=\"line\">Out[<span class=\"number\">70</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: re.match(<span class=\"string\">r'''(?x)</span></span><br><span class=\"line\"><span class=\"string\">...:          \\((\\d&#123;3&#125;)\\) #区号</span></span><br><span class=\"line\"><span class=\"string\">...:          \\s+         #空白</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;3&#125;       #前缀</span></span><br><span class=\"line\"><span class=\"string\">...:          -           #横线</span></span><br><span class=\"line\"><span class=\"string\">...:          \\d&#123;4&#125;       #尾号</span></span><br><span class=\"line\"><span class=\"string\">...:          '''</span>, phonenumber).group()</span><br><span class=\"line\">Out[<span class=\"number\">71</span>]: <span class=\"string\">'(800) 555-1212'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>(?:…) </strong>可以对部分正则表达式分组，但是并不会保存该分组用于后续的检查或者应用<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">3</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"string\">'http://google.com http://www.google.com http://code.google.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: re.findall(<span class=\"string\">r\"http://(\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: [(<span class=\"string\">''</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'www.'</span>, <span class=\"string\">'google.com'</span>), (<span class=\"string\">'code.'</span>, <span class=\"string\">'google.com'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">5</span>]: re.findall(<span class=\"string\">r\"http://(?:\\w+\\.)?(\\w+\\.com)\"</span>, s)</span><br><span class=\"line\">Out[<span class=\"number\">5</span>]: [<span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>, <span class=\"string\">'google.com'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><strong>(?P<name>)</name></strong>通过名称来保存匹配到的分组<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">11</span>]: re.search(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"2018-5-8\"</span>).groupdict()</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: &#123;<span class=\"string\">'year'</span>: <span class=\"string\">'2018'</span>, <span class=\"string\">'month'</span>: <span class=\"string\">'5'</span>, <span class=\"string\">'day'</span>: <span class=\"string\">'8'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: re.sub(<span class=\"string\">r\"(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;1,2&#125;)-(?P&lt;day&gt;\\d&#123;1,2&#125;)\"</span>, <span class=\"string\">\"\\g&lt;month&gt;-\\g&lt;day&gt;-\\g&lt;year&gt;\"</span>,<span class=\"string\">\"2018-5-8\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">12</span>]: <span class=\"string\">'5-8-2018'</span></span><br></pre></td></tr></table></figure></p>\n<p>在sub函数中可以通过”\\g&lt;year>“表示匹配到的分组year，而不用\\num来表示。<br><br><br><strong>(?=…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">13</span>]: re.findall(<span class=\"string\">r\"\\w+ (?=van Rossum)\"</span>, <span class=\"string\">\"Guido van Rossum, Just van Rossum, Kay Ring\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: [<span class=\"string\">'Guido '</span>, <span class=\"string\">'Just '</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\w+ (?=van Rossum)\"</span>模式，表示只有后接<span class=\"string\">\"van Rossum\"</span>的<span class=\"string\">\"\\w+ \"</span>才匹配。</span><br></pre></td></tr></table></figure></p>\n<p><br><br><strong>(?!…)</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">22</span>]: re.findall(<span class=\"string\">r\"Emma (?!test)\"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">22</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">23</span>]: re.findall(<span class=\"string\">r\"Emma \"</span>, <span class=\"string\">\"Emma test, Emma Snow, Emma Hu\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">23</span>]: [<span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>, <span class=\"string\">'Emma '</span>]</span><br><span class=\"line\"><span class=\"string\">\"Emma (?!test)\"</span>模式 ，表示只有后面不是接<span class=\"string\">\"test\"</span>的<span class=\"string\">\"Emma \"</span>才会匹配。</span><br></pre></td></tr></table></figure></p>\n","text":"Python re模块除了常用的几个函数外，还有一个功能强大的东西—扩展符号。<br><br><br>(?iLmsux)<br><br><br>“i”表示忽略大小写匹配,正如flags=re.IGNORECASE<br>1<br>2<br>In [42]: re.findall(","link":"","raw":null,"photos":[],"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"Python","slug":"Python","count":2,"path":"api/tags/Python.json"}]}]}